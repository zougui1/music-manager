{"version":3,"file":"playlist.controller.js","sourceRoot":"","sources":["../../../../../src/app/controllers/api/playlist/playlist.controller.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,qCAAkJ;AAClJ,+CAAuD;AAGvD,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB;IAmB7B,KAAK,CAAC,IAAI,CAAC,GAAY;QACrB,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACjD,OAAO,IAAI,qBAAc,CAAC,SAAS,CAAC,CAAC;IACvC,CAAC;IAGD,KAAK,CAAC,OAAO,CAAC,GAAY,EAAE,EAAE,EAAE,EAAkB;QAChD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;QAEnD,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO,IAAI,2BAAoB,EAAE,CAAC;SACnC;QAED,OAAO,IAAI,qBAAc,CAAC,QAAQ,CAAC,CAAC;IACtC,CAAC;IAGD,KAAK,CAAC,GAAG,CAAC,GAAY;QACpB,MAAM,QAAQ,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC;QAClC,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACrC,OAAO,IAAI,qBAAc,CAAC,QAAQ,CAAC,CAAC;IACtC,CAAC;IAGD,KAAK,CAAC,GAAG,KAA4B,OAAO,IAAI,qBAAc,EAAE,CAAC,CAAC,CAAC;IAGnE,KAAK,CAAC,MAAM,CAAC,GAAY,EAAE,EAAE,EAAE,EAAkB,EAAE,IAAmB;QACpE,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QACrC,OAAO,IAAI,qBAAc,EAAE,CAAC;IAC9B,CAAC;IAGD,KAAK,CAAC,OAAO,KAA4B,OAAO,IAAI,qBAAc,EAAE,CAAC,CAAC,CAAC;CACxE,CAAA;AAlDC;IADC,iBAAU;8BACA,uBAAQ;oDAAC;AAgBpB;IAdC,UAAG,CAAC,GAAG,CAAC;IACR,kBAAW,CAAC,GAAG,EAAE;QAChB,WAAW,EAAE,mBAAmB;QAChC,OAAO,EAAE;YACP,kBAAkB,EAAE;gBAClB,MAAM,EAAE;oBACN,IAAI,EAAE,OAAO;oBACb,KAAK,EAAE;wBACL,IAAI,EAAE,QAAQ;qBACf;iBACF;aACF;SACF;KACF,CAAC;;qCACc,cAAO;;8CAGtB;AAGD;IADC,UAAG,CAAC,MAAM,CAAC;;qCACO,cAAO;;iDAQzB;AAGD;IADC,WAAI,CAAC,GAAG,CAAC;;qCACK,cAAO;;6CAIrB;AAGD;IADC,cAAO,CAAC,GAAG,CAAC;;;;6CACsD;AAGnE;IADC,YAAK,CAAC,MAAM,CAAC;;qCACI,cAAO;;gDAGxB;AAGD;IADC,cAAO,CAAC,MAAM,CAAC;;;;iDACuD;AApD5D,kBAAkB;IAD9B,UAAG,CAAC,oBAAoB,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;GACxD,kBAAkB,CAqD9B;AArDY,gDAAkB","sourcesContent":["import { Context, dependency, Get, Post, Patch, Options, HttpResponse, HttpResponseOK, Log, ApiResponse, HttpResponseNotFound } from '@foal/core';\nimport { Playlist, UpdateOptions } from 'playlist-pkg';\n\n@Log('PlaylistController', { body: true, params: true, query: true })\nexport class PlaylistController {\n\n  @dependency\n  playlist!: Playlist;\n\n  @Get('/')\n  @ApiResponse(200, {\n    description: 'List of playlists',\n    content: {\n      'application/json': {\n        schema: {\n          type: 'array',\n          items: {\n            type: 'object',\n          }\n        }\n      }\n    }\n  })\n  async find(ctx: Context): Promise<HttpResponse> {\n    const playlists = await this.playlist.findMany();\n    return new HttpResponseOK(playlists);\n  }\n\n  @Get('/:id')\n  async findOne(ctx: Context, { id }: { id: number }): Promise<HttpResponse> {\n    const playlist = await this.playlist.findById(+id);\n\n    if (!playlist) {\n      return new HttpResponseNotFound();\n    }\n\n    return new HttpResponseOK(playlist);\n  }\n\n  @Post('/')\n  async add(ctx: Context): Promise<HttpResponse> {\n    const playlist = ctx.request.body;\n    await this.playlist.create(playlist);\n    return new HttpResponseOK(playlist);\n  }\n\n  @Options('/')\n  async opt(): Promise<HttpResponse> { return new HttpResponseOK(); }\n\n  @Patch('/:id')\n  async update(ctx: Context, { id }: { id: number }, body: UpdateOptions): Promise<HttpResponse> {\n    await this.playlist.update(id, body);\n    return new HttpResponseOK();\n  }\n\n  @Options('/:id')\n  async optById(): Promise<HttpResponse> { return new HttpResponseOK(); }\n}\n"]}