{"version":3,"file":"app.controller.js","sourceRoot":"","sources":["../../../src/app/controllers/app.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { controller, IAppController, Context, HttpResponse, Config } from '@foal/core';\nimport { createConnection } from 'database-pkg';\nimport { ApiException, ApiErrorObject } from 'error-pkg';\nimport { ObjectLiteral } from 'types-pkg';\n\nimport { ApiController } from './api';\nimport { AuthController } from './auth';\nimport { FileController } from './file.controller';\nimport { OpenApiController } from './openApi.controller';\nimport { getMessage } from '../translations';\nimport { PublicError } from '../types';\nimport { convertErrorDescriptionToCode } from '../utils';\nimport { HandleOptionsRequest, Cors, HandleErrorResponses } from '../hooks';\n\n// it is important that Cors gets called\n// before HandleOptionsRequest since it\n// ends the request\n@Cors()\n@HandleOptionsRequest()\n@HandleErrorResponses()\nexport class AppController implements IAppController {\n  subControllers = [\n    controller('/files', FileController),\n    controller('/api', ApiController),\n    controller('/swagger', OpenApiController),\n    controller('/auth', AuthController),\n  ];\n\n  private translationFailed = false;\n\n  async init(): Promise<void> {\n    await createConnection();\n  }\n\n  handleError(error: any, ctx: Context, originalError?: ApiException): HttpResponse {\n    console.error(error);\n    const { headers, path } = ctx.request as { path: string, headers: { [index: string]: string | undefined } };\n    const language = headers['content-language']?.split('-')[0];\n    const errorValues = {\n      route: path,\n    };\n\n    const sourceError = originalError ?? error;\n    const errorData = this.getInternalError(error, errorValues);\n    const translation = this.translateMessage(language, errorData, originalError);\n\n    if ('error' in translation) {\n      return this.handleError(translation.error, ctx, sourceError);\n    }\n\n    const data = { message: translation.message, path };\n    const publicError = this.getPublicError(errorData, data, sourceError);\n\n    return new Response(publicError);\n  }\n\n  //#region private\n  private getInternalError(error: any, errorValues: ObjectLiteral): ApiErrorObject {\n    if (error instanceof HttpResponse) {\n      const body = error.body as { description: string };\n\n      error = {\n        ...convertErrorDescriptionToCode(body.description),\n        status: error.statusCode,\n      };\n    }\n\n    const apiError = ApiException.from(error, errorValues);\n    return apiError.toObject();\n  }\n\n  private getPublicError(errorData: ApiErrorObject, data: { message: string, path: string }, sourceError: any): PublicError {\n    const publicError: PublicError = {\n      ...data,\n      status: errorData.status,\n      code: errorData.code,\n    };\n\n    if (Config.get('settings.debug', 'boolean') && sourceError instanceof Error) {\n      publicError.stack = sourceError.stack?.split('\\n');\n    }\n\n    return publicError;\n  }\n\n  private translateMessage(language: string | undefined, errorData: ApiErrorObject, originalError?: ApiException): TranslateMessageResult {\n    let message: string;\n\n    try {\n      message = getMessage(language, errorData.message, errorData.values);\n    } catch (error) {\n      // prevents infinite loop if the translation fails everytime\n      if (this.translationFailed) {\n        throw originalError;\n      }\n\n      this.translationFailed = true;\n      return { error };\n    }\n\n    this.translationFailed = false;\n    return { message };\n  }\n  //#endregion\n}\n\ntype TranslateMessageResult = { message: string } | { error: any };\n\nclass Response extends HttpResponse {\n\n  readonly statusCode: number;\n  readonly statusMessage: string;\n  readonly code: string;\n\n\n  constructor(data: { status: number, message: string, code: string }) {\n    super(data);\n\n    this.statusCode = data.status;\n    this.statusMessage = data.message;\n    this.code = data.code;\n  }\n}\n"]}