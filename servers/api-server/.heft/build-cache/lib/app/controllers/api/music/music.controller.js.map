{"version":3,"file":"music.controller.js","sourceRoot":"","sources":["../../../../../src/app/controllers/api/music/music.controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,qCAA0H;AAC1H,yCAAkC;AAClC,+CAAwC;AACxC,mDAA4C;AAC5C,gDAAwB;AAExB,2CAAiD;AAGjD,IAAa,eAAe,GAA5B,MAAa,eAAe;IAqB1B,KAAK,CAAC,IAAI,CAAC,GAAY;QACrB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;QAC3C,OAAO,IAAI,qBAAc,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IAED;;;;;;;;;;;;MAYE;IAeF,KAAK,CAAC,GAAG,CAAC,GAAY;QACpB,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC;QAC9C,MAAM,UAAU,GAAG,IAAI,2BAAU,CAAC,IAAI,CAAC,CAAC;QACxC,MAAM,WAAW,GAAG,MAAM,UAAU,CAAC,aAAa,EAAE,CAAC;QAErD,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;YACpC,MAAM,aAAa,GAAG,cAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACrD,MAAM,iBAAiB,GAAG,UAAU,CAAC,KAAK;gBACxC,CAAC,CAAC,cAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC;gBACjC,CAAC,CAAC,SAAS,CAAC;YAEd,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;gBACpC,KAAK,EAAE,UAAU,CAAC,KAAK;gBACvB,IAAI,EAAE,+BAA+B,aAAa,EAAE;gBACpD,QAAQ,EAAE,UAAU,CAAC,QAAQ;gBAC7B,OAAO,EAAE,UAAU,CAAC,OAAO;gBAC3B,KAAK,EAAE,UAAU,CAAC,KAAK;gBACvB,MAAM,EAAE,UAAU,CAAC,MAAM;gBACzB,SAAS,EAAE,iBAAiB;oBAC1B,CAAC,CAAC,+BAA+B,iBAAiB,EAAE;oBACpD,CAAC,CAAC,SAAS;aACd,CAAC,CAAC;YAEH,IAAI,UAAU,EAAE;gBACd,MAAM,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;aACjD;SACF;QAED,OAAO,IAAI,qBAAc,EAAE,CAAC;IAC9B,CAAC;CACF,CAAA;AAhFC;IADC,iBAAU;8BACH,iBAAK;8CAAC;AAEd;IADC,iBAAU;8BACA,uBAAQ;iDAAC;AAgBpB;IAdC,UAAG,CAAC,GAAG,CAAC;IACR,kBAAW,CAAC,GAAG,EAAE;QAChB,WAAW,EAAE,gBAAgB;QAC7B,OAAO,EAAE;YACP,kBAAkB,EAAE;gBAClB,MAAM,EAAE;oBACN,IAAI,EAAE,OAAO;oBACb,KAAK,EAAE;wBACL,IAAI,EAAE,QAAQ;qBACf;iBACF;aACF;SACF;KACF,CAAC;;qCACc,cAAO;;2CAGtB;AA6BD;IAbC,WAAI,CAAC,GAAG,CAAC;IACV,6BAA6B;;IAC5B,mBAAY,CAAC,8BAAkB,CAAC;IAChC,kBAAW,CAAC,GAAG,EAAE;QAChB,WAAW,EAAE,eAAe;QAC5B,OAAO,EAAE;YACP,kBAAkB,EAAE;gBAClB,MAAM,EAAE;oBACN,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF,CAAC;;qCACa,cAAO;;0CA6BrB;AAlFU,eAAe;IAD3B,UAAG,CAAC,iBAAiB,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;GACrD,eAAe,CAmF3B;AAnFY,0CAAe","sourcesContent":["import { Context, dependency, Get, Post, HttpResponse, HttpResponseOK, Log, ApiResponse, ValidateBody } from '@foal/core';\nimport { Music } from 'music-pkg';\nimport { Playlist } from 'playlist-pkg';\nimport { Downloader } from 'downloader-pkg';\nimport path from 'path';\n\nimport { addMusicBodySchema } from './music.dto';\n\n@Log('MusicController', { body: true, params: true, query: true })\nexport class MusicController {\n\n  @dependency\n  music!: Music;\n  @dependency\n  playlist!: Playlist;\n\n  @Get('/')\n  @ApiResponse(200, {\n    description: 'List of musics',\n    content: {\n      'application/json': {\n        schema: {\n          type: 'array',\n          items: {\n            type: 'object',\n          }\n        }\n      }\n    }\n  })\n  async find(ctx: Context): Promise<HttpResponse> {\n    const musics = await this.music.findMany();\n    return new HttpResponseOK(musics);\n  }\n\n  /**\n   * TODO rewrite it with TypeORM\n  async getOne({ params, response }: HttpContextContract): Promise<void | Music> {\n    //const music = await Music.find(params.id);\n    const music = await Music.query().whereRaw('artists LIKE \\'%\"SK√ÅLD\"%\\'').first();\n\n    if (!music) {\n      return response.notFound();\n    }\n\n    return music;\n  }\n  */\n\n  @Post('/')\n  //@ValidateBody(AddMusicBody)\n  @ValidateBody(addMusicBodySchema)\n  @ApiResponse(201, {\n    description: 'Music created',\n    content: {\n      'application/json': {\n        schema: {\n          type: 'object',\n        }\n      }\n    },\n  })\n  async add(ctx: Context): Promise<HttpResponse> {\n    const { link, playlistId } = ctx.request.body;\n    const downloader = new Downloader(link);\n    const downloadeds = await downloader.downloadAudio();\n\n    for (const downloaded of downloadeds) {\n      const musicFileName = path.basename(downloaded.file);\n      const thumbnailFileName = downloaded.cover\n        ? path.basename(downloaded.cover)\n        : undefined;\n\n      const music = await this.music.create({\n        title: downloaded.title,\n        link: `http://localhost:3333/files/${musicFileName}`,\n        duration: downloaded.duration,\n        artists: downloaded.artists,\n        album: downloaded.album,\n        source: downloaded.source,\n        thumbnail: thumbnailFileName\n          ? `http://localhost:3333/files/${thumbnailFileName}`\n          : undefined,\n      });\n\n      if (playlistId) {\n        await this.playlist.addMusic(playlistId, music);\n      }\n    }\n\n    return new HttpResponseOK();\n  }\n}\n"]}