{"version":3,"file":"queue.js","sourceRoot":"","sources":["../src/queue.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,mCAA0D;AAC1D,+BAA4C;AAAA,CAAC;AAC7C,8CAAyE;AAEzE,6BAAgC;AAChC,6DAA+C;AAE/C,MAAM,WAAW,GAAG,GAAG,CAAC;AAEjB,MAAM,4BAA4B,GAAG,CAAC,OAA6C,EAA4B,EAAE;;IACtH,OAAO,aAAQ;SACZ,OAAO,CAAC,CAAC,YAAY,CAAC,8BAA8B,CAAC,CAAC;SACtD,IAAI;IACH,0DAA0D;IAC1D,kBAAM,CAAC,eAAQ,CAAC,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,UAAU,mCAAI,WAAW,CAAC,CAAC;IACpD,gEAAgE;IAChE,wBAAwB;IACxB,oBAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CACxB,mBAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,EAChC,oBAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,mBAAO,EAAE,CAAC,CAAC,CACzC,CAAC;IACF,iEAAiE;IACjE,eAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,2BAAkB,CAAC,QAAQ,CAAC,CAAC,CAC9C,CAAC;AACN,CAAC,CAAA;AAfY,QAAA,4BAA4B,gCAexC;AAEM,MAAM,2BAA2B,GAAG,CAAC,IAAS,EAAE,EAAE;IACvD,aAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,WAAW,EAAE,YAAY,CAAC,8BAA8B,EAAE,CAAC,CAAC;AACvF,CAAC,CAAA;AAFY,QAAA,2BAA2B,+BAEvC","sourcesContent":["import { handleManyMessages, ManyMessages } from 'mq-pkg';\nimport { Observable, interval } from 'rxjs';;\nimport { map, groupBy, mergeMap, toArray, window } from 'rxjs/operators';\n\nimport { mqClient } from './mq';\nimport * as messageTypes from './messageTypes';\n\nconst BUFFER_TIME = 300;\n\nexport const observeMusicDownloadProgress = (options?: ObserveMusicDownloadProgressOptions): Observable<ManyMessages> => {\n  return mqClient\n    .observe([messageTypes.NOTIFY_MUSIC_DOWNLOAD_PROGRESS])\n    .pipe(\n      // group all the messages consumed within XXX milliseconds\n      window(interval(options?.bufferTime ?? BUFFER_TIME)),\n      // group consumed messages by video ID and turn them into arrays\n      // TODO group by user ID\n      mergeMap(msg$ => msg$.pipe(\n        groupBy(msg => msg.body.videoId),\n        mergeMap(group => group.pipe(toArray()))\n      )),\n      // turn an array of messages into an object wrapping the messages\n      map(messages => handleManyMessages(messages)),\n    );\n}\n\nexport const notifyMusicDownloadProgress = (data: any) => {\n  mqClient.publish(data, { messageType: messageTypes.NOTIFY_MUSIC_DOWNLOAD_PROGRESS });\n}\n\nexport interface ObserveMusicDownloadProgressOptions {\n  bufferTime?: number;\n}\n"]}