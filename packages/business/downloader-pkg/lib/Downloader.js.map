{"version":3,"file":"Downloader.js","sourceRoot":"","sources":["../src/Downloader.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,6CAAsC;AACtC,6CAAsC;AAEtC,kEAAoD;AACpD,yCAAoC;AAEpC,qCAAqD;AAErD,MAAa,UAAU;IAKrB,YAAY,OAAe;QACzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QAEvB,IAAI,qBAAO,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE;YACjC,IAAI,CAAC,UAAU,GAAG,IAAI,qBAAO,EAAE,CAAC;SACjC;aAAM,IAAI,qBAAO,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;YAC1C,IAAI,CAAC,UAAU,GAAG,IAAI,qBAAO,EAAE,CAAC;SACjC;aAAM;YACL,MAAM,IAAI,kCAAyB,EAAE,CAAC;SACvC;IACH,CAAC;IAED,KAAK,CAAC,aAAa;;QACjB,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrE,MAAM,WAAW,GAAG,mBAAO,CAAC,UAAU,CAAC,CAAC;QACxC,MAAM,SAAS,GAAsB,EAAE,CAAC;QAExC,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;YACpC,MAAM,QAAQ,GAAG,MAAM,aAAa,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAChE,SAAS,CAAC,IAAI,iCACT,UAAU,KACb,QAAQ,EAAE,MAAA,QAAQ,CAAC,MAAM,CAAC,QAAQ,mCAAI,CAAC,IACvC,CAAC;SACJ;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;CACF;AAhCD,gCAgCC","sourcesContent":["import { Youtube } from 'youtube-pkg';\nimport { Spotify } from 'spotify-pkg';\nimport { Downloader as IDownloader, DownloadedAudio } from 'types-pkg';\nimport * as musicMetadata from 'music-metadata-pkg';\nimport { toArray } from 'utils-pkg';\n\nimport { DownloaderInvalidUrlError } from './errors';\n\nexport class Downloader implements IDownloader{\n\n  readonly urlOrId: string;\n  readonly downloader: IDownloader;\n\n  constructor(urlOrId: string) {\n    this.urlOrId = urlOrId;\n\n    if (Spotify.isSpotifyUrl(urlOrId)) {\n      this.downloader = new Spotify();\n    } else if (Youtube.isYoutubeVideo(urlOrId)) {\n      this.downloader = new Youtube();\n    } else {\n      throw new DownloaderInvalidUrlError();\n    }\n  }\n\n  async downloadAudio(): Promise<DownloadedAudio[]> {\n    const downloaded = await this.downloader.downloadAudio(this.urlOrId);\n    const downloadeds = toArray(downloaded);\n    const metadatas: DownloadedAudio[] = [];\n\n    for (const downloaded of downloadeds) {\n      const metadata = await musicMetadata.parseFile(downloaded.file);\n      metadatas.push({\n        ...downloaded,\n        duration: metadata.format.duration ?? 0,\n      });\n    }\n\n    return metadatas;\n  }\n}\n"]}