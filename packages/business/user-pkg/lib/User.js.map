{"version":3,"file":"User.js","sourceRoot":"","sources":["../src/User.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,+CAA2F;AAC3F,+CAAiC;AAEjC,qCAAqD;AAErD,MAAM,mBAAmB,GAAG,gGAAgG,CAAC;AAE7H,MAAa,IAAK,SAAQ,iCAAkC;IAE1D;QACE,KAAK,CAAC,6BAAc,CAAC,CAAC;IACxB,CAAC;IAED,gBAAgB;IACT,KAAK,CAAC,QAAQ;QACnB,OAAO,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;IAChC,CAAC;IAEM,KAAK,CAAC,KAAK,CAAC,KAAa,EAAE,QAAgB;;QAChD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAEhD,6DAA6D;QAC7D,0BAA0B;QAC1B,MAAM,UAAU,GAAG,CAAC,CAAC,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,QAAQ,CAAA,CAAC;QACpC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,QAAQ,mCAAI,mBAAmB,EAAE,QAAQ,CAAC,CAAC;QAEnF,IAAI,CAAC,OAAO,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,EAAE;YACpC,MAAM,IAAI,kCAAyB,EAAE,CAAC;SACvC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,IAAuD;QACzE,IAAI,mCACC,IAAI,KACP,QAAQ,EAAE,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GACzC,CAAC;QAEF,OAAO,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC;IAC7C,CAAC;IAEM,KAAK,CAAC,KAAK;QAChB,MAAM,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;IAC9B,CAAC;CAEF;AAvCD,oBAuCC","sourcesContent":["import { RepositoryAccessor, UserEntity, UserRepository, DeepPartial } from 'database-pkg';\nimport * as hash from 'hash-pkg';\n\nimport { IncorrectCredentialsError } from './errors';\n\nconst defaultPasswordHash = '$argon2id$v=19$m=64,t=1,p=1$IzljqZZODW3Qa8aLgBMIrw$hpB1Ub440QGRyLt58KdAu4Bw3tHDazn68xO4gleFp3w';\n\nexport class User extends RepositoryAccessor<UserRepository> {\n\n  constructor() {\n    super(UserRepository);\n  }\n\n  //#region public\n  public async findMany(): Promise<UserEntity[]> {\n    return await this.repo.find();\n  }\n\n  public async login(email: string, password: string): Promise<UserEntity> {\n    const user = await this.repo.findByEmail(email);\n\n    // always verify the password even if the user does not exist\n    // to prevent time attacks\n    const isPassword = !!user?.password;\n    const isValid = await hash.verify(user?.password ?? defaultPasswordHash, password);\n\n    if (!isValid || !isPassword || !user) {\n      throw new IncorrectCredentialsError();\n    }\n\n    return user;\n  }\n\n  public async signup(user: { password: string, name: string, email: string }): Promise<UserEntity> {\n    user = {\n      ...user,\n      password: await hash.hash(user.password),\n    };\n\n    return await this.repo.create(user).save();\n  }\n\n  public async clear(): Promise<void> {\n    await this.repo.deleteAll();\n  }\n  //#endregion\n}\n"]}