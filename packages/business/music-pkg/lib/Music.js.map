{"version":3,"file":"Music.js","sourceRoot":"","sources":["../src/Music.ts"],"names":[],"mappings":";;;AAAA,+CAMsB;AACtB,yCAA6D;AAC7D,yCAA0C;AAE1C,MAAa,KAAM,SAAQ,iCAAmC;IAE5D;QACE,KAAK,CAAC,8BAAe,CAAC,CAAC;IACzB,CAAC;IAED,gBAAgB;IACT,KAAK,CAAC,QAAQ,CAAC,QAA2B;QAC/C,MAAM,QAAQ,GAAG,yBAAa,CAAC,QAAQ,CAAC,MAAM,EAAE,uBAAW,CAAC,UAAU,CAAC,CAAC;QAExE,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;YACxB,IAAI,EAAE,EAAE,EAAE,EAAE,QAAQ,CAAC,IAAI,CAAC,EAAE,EAAE;YAC9B,MAAM,EAAE,QAAQ;SACjB,CAAC,CAAC;IACL,CAAC;IAEM,KAAK,CAAC,QAAQ,CAAC,EAAU;QAC9B,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC/B,CAAC;IAEM,KAAK,CAAC,cAAc,CAAC,MAA4B,EAAE,KAA+B;QACvF,MAAM,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAChD,CAAC;IAIM,KAAK,CAAC,MAAM,CAAC,KAA4D;QAC9E,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACxB,OAAO,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACpC;QAED,OAAO,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAEM,KAAK,CAAC,KAAK;QAChB,MAAM,IAAI,CAAC,OAAO,CAAC,qCAAsB,CAAC,CAAC,SAAS,EAAE,CAAC;QACvD,MAAM,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;IAC9B,CAAC;CAEF;AAvCD,sBAuCC","sourcesContent":["import {\n  RepositoryAccessor,\n  MusicEntity,\n  MusicRepository,\n  MusicPlayingRepository,\n  DeepPartial,\n} from 'database-pkg';\nimport { Music as MusicTable, MusicStatus } from 'types-pkg';\nimport { toFilledArray } from 'utils-pkg';\n\nexport class Music extends RepositoryAccessor<MusicRepository> {\n\n  constructor() {\n    super(MusicRepository);\n  }\n\n  //#region public\n  public async findMany(criteria: IFindManyCriteria): Promise<MusicEntity[]> {\n    const statuses = toFilledArray(criteria.status, MusicStatus.DOWNLOADED);\n\n    return this.repo.findMany({\n      user: { id: criteria.user.id },\n      status: statuses,\n    });\n  }\n\n  public async findById(id: number): Promise<MusicEntity | undefined> {\n    return this.repo.findOne(id);\n  }\n\n  public async updateBySource(source: MusicTable['source'], music: DeepPartial<MusicEntity>): Promise<void> {\n    await this.repo.updateBySource(source, music);\n  }\n\n  public async create(music: DeepPartial<MusicEntity>[]): Promise<MusicEntity[]>;\n  public async create(music: DeepPartial<MusicEntity>): Promise<MusicEntity>;\n  public async create(music: DeepPartial<MusicEntity> | DeepPartial<MusicEntity>[]): Promise<MusicEntity | MusicEntity[]> {\n    if (Array.isArray(music)) {\n      return await this.repo.save(music);\n    }\n\n    return await this.repo.save(music);\n  }\n\n  public async clear(): Promise<void> {\n    await this.getRepo(MusicPlayingRepository).deleteAll();\n    await this.repo.deleteAll();\n  }\n  //#endregion\n}\n\nexport interface IFindManyCriteria {\n  user: {\n    id: number;\n  };\n  status?: MusicStatus | MusicStatus[];\n}\n"]}