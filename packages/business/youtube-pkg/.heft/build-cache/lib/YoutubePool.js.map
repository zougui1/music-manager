{"version":3,"file":"YoutubePool.js","sourceRoot":"","sources":["../src/YoutubePool.ts"],"names":[],"mappings":"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","sourcesContent":["import { isInRange } from 'utils-pkg';\n\nimport { YoutubeVideo } from './YoutubeVideo';\n\nexport class YoutubePool {\n\n  static acceptedDurationOffset = 5;\n\n  videos: TestedYoutubeVideo[] = [];\n  expectedData: any;\n\n  constructor(videos: YoutubeVideo[], expectedData: any) {\n    const _videos = videos as TestedYoutubeVideo[];\n\n    for (const video of _videos) {\n      video.correctness = 100;\n    }\n\n    this.videos = _videos;\n    this.expectedData = expectedData;\n  }\n\n  matchArtist(source: string | string[], artist: any): boolean {\n    const names = [artist.name, ...artist.altNames];\n    return names.some(artistName => source.includes(artistName.toLowerCase()));\n  }\n\n  async matchAgainstExpectations(video: TestedYoutubeVideo) {\n    const { videoDetails } = await video.getInfo();\n    const videoTitle = videoDetails.title.toLowerCase();\n    const videoKeywords = (videoDetails.keywords ?? []).map(key => key.toLowerCase());\n    const videoDuration = +videoDetails.lengthSeconds;\n\n    const expectedAlbum = this.expectedData.album.toLowerCase();\n    const expectedTitle = this.expectedData.title.toLowerCase();\n    const expectedArtistNames = [this.expectedData.artist.name, ...this.expectedData.artist.altNames];\n    const expectedMinDuration = Math.floor(this.expectedData.duration - YoutubePool.acceptedDurationOffset);\n    const expectedMaxDuration = Math.floor(this.expectedData.duration + YoutubePool.acceptedDurationOffset);\n\n    if (!videoTitle.includes(expectedAlbum)) {\n      video.correctness -= 10;\n    }\n\n    if (!videoTitle.includes(expectedTitle)) {\n      video.correctness -= 40;\n    }\n\n    if (!expectedArtistNames.some(artist => videoTitle.includes(artist.toLowerCase()))) {\n      video.correctness -= 30;\n    }\n\n    if (!expectedArtistNames.some(artist => videoKeywords.includes(artist.toLowerCase()))) {\n      video.correctness -= 50;\n    }\n\n    if (videoDetails.category.toLowerCase() !== 'music') {\n      video.correctness -= 10;\n    }\n\n    if (!videoKeywords.includes(expectedAlbum)) {\n      video.correctness -= 10;\n    }\n\n    if (!isInRange(videoDuration, expectedMinDuration, expectedMaxDuration)) {\n      video.correctness -= 10;\n    }\n  }\n\n  async matchAll() {\n    // make all the necessary requests in parallel\n    // since their result is cached they can be called\n    // again at no cost\n    await Promise.all(this.videos.map(video => video.getInfo()));\n\n    for (const video of this.videos) {\n      await this.matchAgainstExpectations(video);\n    }\n  }\n\n  async getMostCorrectVideo(): Promise<TestedYoutubeVideo> {\n    await this.matchAll();\n    const sortedVideos = this.videos.sort((a, b) => b.correctness - a.correctness);\n\n    return sortedVideos[0];\n  }\n}\n\ninterface TestedYoutubeVideo extends YoutubeVideo {\n  correctness: number;\n}\n"]}