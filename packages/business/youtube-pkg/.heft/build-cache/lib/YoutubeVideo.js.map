{"version":3,"file":"YoutubeVideo.js","sourceRoot":"","sources":["../src/YoutubeVideo.ts"],"names":[],"mappings":"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","sourcesContent":["import ytdl, { videoInfo, downloadOptions } from 'ytdl-core';\nimport { Readable } from 'stream';\nimport got from 'got';\n\nimport { YoutubeInvalidUrlError, YoutubeVideoNotFoundError } from './errors';\nimport { getYoutubeUrl, getThumbnailUrl, getYoutubeId } from './utils';\n\nexport class YoutubeVideo {\n\n  url: string;\n  thumbnailUrl: string | undefined;\n  id: string | undefined;\n  info: videoInfo  | undefined;\n\n  constructor(urlOrId: string) {\n    this.url = getYoutubeUrl(urlOrId);\n    this.id = getYoutubeId(this.url);\n\n    if (this.id) {\n      this.thumbnailUrl = getThumbnailUrl(this.id);\n    }\n  }\n\n  //#region private\n  private async exists(): Promise<boolean> {\n    if (!this.thumbnailUrl) {\n      return false;\n    }\n\n    try {\n      await got.head(this.thumbnailUrl);\n    } catch (error) {\n      return false;\n    }\n\n    return true;\n  }\n  //#endregion\n\n  //#region public\n  async check(): Promise<IValidVideoData> {\n    if (!this.id || !this.thumbnailUrl) {\n      throw new YoutubeInvalidUrlError();\n    }\n\n    const exists = await this.exists();\n\n    if (!exists) {\n      throw new YoutubeVideoNotFoundError();\n    }\n\n    return {\n      url: this.url,\n      id: this.id,\n      thumbnailUrl: this.thumbnailUrl,\n    };\n  }\n\n  async getInfo(): Promise<videoInfo> {\n    return this.info ??= await ytdl.getInfo(this.url);\n  }\n\n  async getVideoInfo(): Promise<VideoInfo> {\n    const info = await this.getInfo();\n    const videoTitle = info.videoDetails.title;\n    let artist = 'Unknown';\n    let title = 'Unknown';\n    const publishDate = info.videoDetails.publishDate;\n\n    if (videoTitle.indexOf('-') > -1) {\n      let temp = videoTitle.split('-');\n\n      if (temp.length >= 2) {\n        artist = temp[0].trim();\n        title = temp[1].trim();\n      }\n    } else {\n      title = videoTitle;\n    }\n\n    const audioBitrates = info.formats\n      .map(format => format.audioBitrate)\n      .filter(audioBitrate => audioBitrate) as number[];\n\n    const audioBitrate = Math.max(...audioBitrates);\n\n    return {\n      videoTitle,\n      title,\n      artist,\n      thumbnail: this.thumbnailUrl as string,\n      audioBitrate,\n      publishDate,\n      duration: +info.videoDetails.lengthSeconds,\n      info,\n    };\n  }\n\n  async download(options: downloadOptions): Promise<Readable> {\n    const info = await this.getInfo();\n    return ytdl.downloadFromInfo(info, options);\n  }\n  //#endregion\n}\n\nexport interface IValidVideoData {\n  url: string;\n  thumbnailUrl: string;\n  id: string;\n}\n\nexport interface VideoInfo {\n  videoTitle: string;\n  title: string;\n  artist: string;\n  thumbnail: string;\n  info: videoInfo;\n  audioBitrate: number | undefined;\n  publishDate: string;\n  duration: number;\n}\n"]}