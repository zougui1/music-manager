{"version":3,"file":"getMostCorrectVideo.js","sourceRoot":"","sources":["../src/getMostCorrectVideo.ts"],"names":[],"mappings":"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","sourcesContent":["import { videoInfo } from 'ytdl-core';\nimport { isInRange } from 'utils-pkg';\n\nimport { YoutubeVideo } from './YoutubeVideo';\nimport { TestedYoutubeVideo, ExpectedData, FormattedExpectedData, FormattedVideoData } from './types';\n\nconst toleratedDurationDelta = 5;\n\nexport const getMostCorrectVideo = async (videos: YoutubeVideo[], expectedData: ExpectedData): Promise<TestedYoutubeVideo> => {\n  const computedVideos = await matchVideosCorrrectness(videos, expectedData);\n  const sortedVideos = computedVideos.sort((a, b) => b.correctness - a.correctness);\n\n  return sortedVideos[0];\n}\n\nconst formatExpectedData = (expectedData: ExpectedData): FormattedExpectedData => {\n  const album = expectedData.album.toLowerCase();\n  const title = expectedData.title.toLowerCase();\n  const artistNames = [\n    expectedData.artist.name,\n    ...expectedData.artist.altNames,\n  ].map(a => a.toLowerCase());\n  const minDuration = Math.floor(expectedData.duration - toleratedDurationDelta);\n  const maxDuration = Math.floor(expectedData.duration + toleratedDurationDelta);\n\n  return {\n    album,\n    title,\n    artistNames,\n    minDuration,\n    maxDuration,\n  };\n}\n\nconst formatVideoData = (info: videoInfo): FormattedVideoData => {\n  const title = info.videoDetails.title.toLowerCase();\n  const keywords = (info.videoDetails.keywords ?? []).map(key => key.toLowerCase());\n  const duration = +info.videoDetails.lengthSeconds;\n  const category = info.videoDetails.category.toLowerCase();\n\n  return {\n    title,\n    keywords,\n    duration,\n    category,\n  };\n}\n\nconst computeCorrectness = async (video: YoutubeVideo, expectedData: FormattedExpectedData): Promise<number> => {\n  const videoInfo = await video.getInfo();\n  const videoData = formatVideoData(videoInfo);\n\n  let correctness = 100;\n\n  if (!videoData.title.includes(expectedData.album)) {\n    correctness -= 10;\n  }\n\n  if (!videoData.title.includes(expectedData.title)) {\n    correctness -= 40;\n  }\n\n  if (!expectedData.artistNames.some(artist => videoData.title.includes(artist.toLowerCase()))) {\n    correctness -= 30;\n  }\n\n  if (!expectedData.artistNames.some(artist => videoData.keywords.includes(artist.toLowerCase()))) {\n    correctness -= 50;\n  }\n\n  if (videoData.category !== 'music') {\n    correctness -= 10;\n  }\n\n  if (!videoData.keywords.includes(expectedData.album)) {\n    correctness -= 10;\n  }\n\n  if (!isInRange(videoData.duration, expectedData.minDuration, expectedData.maxDuration)) {\n    correctness -= 10;\n  }\n\n  return correctness;\n}\n\nconst matchVideosCorrrectness = async (videos: YoutubeVideo[], expectedData: ExpectedData) => {\n  const testedVideos = videos as TestedYoutubeVideo[];\n\n  // make all the necessary requests in parallel\n  // since their result is cached they can be called\n  // again at no cost\n  await Promise.all(testedVideos.map(video => video.getInfo()));\n  const cleanData = formatExpectedData(expectedData);\n\n  const computeCorrectnesses = testedVideos.map(async video => {\n    video.correctness = await computeCorrectness(video, cleanData);\n    return video;\n  });\n\n  return await Promise.all(computeCorrectnesses);\n}\n"]}