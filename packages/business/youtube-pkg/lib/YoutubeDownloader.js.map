{"version":3,"file":"YoutubeDownloader.js","sourceRoot":"","sources":["../src/YoutubeDownloader.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events';\nimport { ffmpeg } from 'ffmpeg-pkg';\nimport { downloadOptions, getInfoOptions } from 'ytdl-core';\nimport progress from 'progress-stream';\nimport fs from 'filesystem-pkg';\nimport { Readable } from 'stream';\nimport { DownloadedAudio } from 'types-pkg';\n\nimport { YoutubeVideo } from './YoutubeVideo';\n\nexport class YoutubeDownloader extends EventEmitter {\n\n  quality: downloadOptions['quality'];\n  format: string;\n  progressTimeout: number;\n  requestOptions: getInfoOptions['requestOptions'];\n  allowWebm: boolean;\n\n  constructor(options: IYoutubeDownloaderOptions) {\n    super();\n\n    this.format = options.format;\n    this.quality = options.quality ?? 'highest';\n    this.progressTimeout = options.progressTimeout ?? 100;\n    this.requestOptions = options.requestOptions ?? { maxRedirects: 5 };\n    this.allowWebm = options.allowWebm ?? false;\n  }\n\n  //#region public\n  async download(video: YoutubeVideo): Promise<DownloadedAudio> {\n    const videoId = video.id as string;\n    const info = await video.getVideoInfo();\n    const stream = await video.download(this.getStreamOptions());\n    const output = fs.getAppPath({ extension: this.format });\n\n    const response = await this.waitResponse(stream);\n\n    const progressStream = progress({\n      length: Number(response.headers['content-length']),\n      time: this.progressTimeout,\n    });\n\n    progressStream.on('progress', (progress) => {\n      this.emit('progress', { videoId, progress });\n    });\n\n    await this.performDownload(stream.pipe(progressStream), {\n      audioBitrate: 320,\n      output,\n    });\n\n    return {\n      videoId,\n      file: output,\n      artists: info.artist.split(', '),\n      album: 'Unknown',\n      videoTitle: info.videoTitle,\n      title: info.title,\n      thumbnail: info.thumbnail,\n      publishDate: info.publishDate,\n      date: info.publishDate,\n      source: {\n        youtube: video.url,\n      },\n      duration: info.duration,\n    };\n  }\n  //#endregion\n\n  //#region private\n  private getStreamOptions(): downloadOptions {\n    const streamOptions: downloadOptions =  {\n      quality: this.quality,\n      requestOptions: this.requestOptions\n    };\n\n    if (!this.allowWebm) {\n      streamOptions.filter = format => format.container !== 'webm';\n    }\n\n    return streamOptions;\n  }\n\n  private waitResponse = (stream: Readable): Promise<any> => {\n    return new Promise<any>((resolve) => {\n      stream.on('response', resolve);\n    });\n  }\n\n  private performDownload(stream: Readable, options: DownloadOptions): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      stream.on('error', reject);\n\n      ffmpeg(stream)\n        .audioBitrate(options.audioBitrate)\n        .withAudioCodec('libmp3lame')\n        .format(this.format)\n        .save(options.output)\n        .on('error', reject)\n        .on('end', resolve);\n    });\n  }\n  //#endregion\n}\n\nexport interface YoutubeDownloader {\n  on(event: 'progress', listener: (data: DownloadProgress) => void): this;\n}\n\nexport interface DownloadedYoutube {\n  videoId: string;\n  file: string;\n  youtubeUrl: string;\n  videoTitle: string;\n  artist: string;\n  title: string;\n  thumbnail: string;\n  publishDate: string;\n}\n\nexport interface IYoutubeDownloaderOptions {\n  format: string;\n  // https://github.com/fent/node-ytdl-core/blob/0574df33f3382f3a825e4bef30f21e51cd78eafe/typings/index.d.ts#L7\n  quality?: downloadOptions['quality'];\n  progressTimeout?: number;\n  allowWebm?: boolean;\n  requestOptions?: getInfoOptions['requestOptions'];\n  outputOptions?: string[];\n}\n\nexport interface DownloadProgress {\n  videoId: string;\n  // https://github.com/freeall/progress-stream#usage\n  progress: {\n    percentage: number;\n    transferred: number;\n    length: number;\n    remaining: number;\n    eta: number;\n    runtime: number;\n    delta: number;\n    speed: number;\n  };\n}\n\ninterface DownloadOptions {\n  audioBitrate: number;\n  output: string;\n}\n"]}