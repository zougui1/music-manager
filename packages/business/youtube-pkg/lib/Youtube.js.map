{"version":3,"file":"Youtube.js","sourceRoot":"","sources":["../src/Youtube.ts"],"names":[],"mappings":"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","sourcesContent":["import { mergeMusicMetadata } from 'music-metadata-pkg';\nimport { DownloadedAudio, Downloader } from 'types-pkg';\nimport { notifyMusicDownloadProgress } from 'notification-pkg';\n\nimport { YoutubeVideo } from './YoutubeVideo';\nimport { YoutubeSearch } from './YoutubeSearch';\nimport { YoutubeDownloader } from './YoutubeDownloader';\nimport { YoutubeVideoNotFoundError } from './errors';\nimport { getYoutubeId } from './utils';\nimport { SearchCriterias } from './types';\n\nconst defaultAudioFormat = 'mp3';\n\nexport class Youtube implements Downloader {\n\n  static Search = YoutubeSearch;\n\n  //#region public static methods\n  static isYoutubeVideo(urlOrId?: string | undefined): boolean {\n    return !!urlOrId && !!getYoutubeId(urlOrId);\n  }\n\n  static async downloadMostCorrectAudio(criterias: SearchCriterias, options?: DownloadAudioOptions): Promise<DownloadedAudio | undefined> {\n    const video = await this.Search.findMostCorrectVideo(criterias);\n\n    if (!video) {\n      return;\n    }\n\n    const downloaded = await Youtube._downloadAudio(video, options);\n    downloaded.correctness = video.correctness;\n\n    return downloaded;\n  }\n\n  static async downloadMostCorrectAudioOrFail(criterias: SearchCriterias, options?: DownloadAudioOptions): Promise<DownloadedAudio> {\n    const downloaded = await this.downloadMostCorrectAudio(criterias, options);\n\n    if (!downloaded) {\n      throw new YoutubeVideoNotFoundError();\n    }\n\n    return downloaded;\n  }\n  //#endregion\n\n  //#region private static methods\n  private static async _downloadAudio(video: YoutubeVideo, options?: DownloadAudioOptions): Promise<DownloadedAudio> {\n    const _options = {\n      withMetadata: options?.withMetadata ?? true,\n      coverUrl: options?.coverUrl,\n    };\n\n    const downloaded = await this._download(video, {\n      format: options?.format ?? defaultAudioFormat,\n      quality: 'highestaudio'\n    });\n\n    if (_options.withMetadata) {\n      downloaded.cover = await mergeMusicMetadata(_options.coverUrl ?? downloaded.file, {\n        artists: downloaded.artists,\n        albumName: 'Unknown',\n        name: downloaded.title,\n        releaseDate: downloaded.publishDate,\n        coverUrl: downloaded.thumbnail,\n      });\n    }\n\n    return downloaded;\n  }\n\n  private static async _download(video: YoutubeVideo, options: DownloadOptions): Promise<DownloadedAudio> {\n    const downloader = new YoutubeDownloader(options);\n\n    downloader.on('progress', progress => {\n      notifyMusicDownloadProgress(progress);\n    });\n\n    return await downloader.download(video);\n  }\n  //#endregion\n\n  //#region public\n  async downloadAudio(urlOrId: string, options?: DownloadAudioOptions): Promise<DownloadedAudio> {\n    const video = new YoutubeVideo(urlOrId);\n    await video.check();\n\n    return await Youtube._downloadAudio(video, options);\n  }\n  //#endregion\n}\n\ninterface DownloadOptions {\n  format: 'mp3';\n  quality: 'highestaudio';\n}\n\nexport interface DownloadAudioOptions {\n  format?: 'mp3';\n  withMetadata?: boolean | undefined;\n  coverUrl?: string;\n}\n"]}