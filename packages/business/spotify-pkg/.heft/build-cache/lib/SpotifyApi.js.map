{"version":3,"file":"SpotifyApi.js","sourceRoot":"","sources":["../src/SpotifyApi.ts"],"names":[],"mappings":"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","sourcesContent":["import SpotifyWebApi from 'spotify-web-api-node';\n\nimport { CLIENT_ID, CLIENT_SECRET } from './setup';\nimport { SpotifyInvalidUrlError, SpotifyNotFoundError, SpotifyUnknownError } from './errors';\nimport { UrlType } from './data';\nimport { Track, Playlist } from './types';\n\nexport class SpotifyApi extends SpotifyWebApi {\n\n  constructor() {\n    super({ clientId: CLIENT_ID, clientSecret: CLIENT_SECRET })\n  }\n\n  //#region public\n  async extractTrack(trackId: string): Promise<Track> {\n    return this.extractionHandler(() => this._extractTrack(trackId), UrlType.track);\n  }\n\n  async extractPlaylist(playlistId: string): Promise<Playlist> {\n    return this.extractionHandler(() => this._extractPlaylist(playlistId), UrlType.playlist);\n  }\n  //#endregion\n\n  //#region private\n  async setup(): Promise<void> {\n    const data = await this.clientCredentialsGrant();\n    this.setAccessToken(data.body.access_token);\n  }\n\n  async extractionHandler<T>(extractor: () => Promise<T>, type: UrlType): Promise<T> {\n    try {\n      return extractor();\n    } catch (error) {\n      switch (error.body?.error.status) {\n        case 404:\n          throw new SpotifyNotFoundError(null, { type });\n        case 400:\n          throw new SpotifyInvalidUrlError();\n\n        default:\n          throw new SpotifyUnknownError();\n      }\n    }\n  }\n\n  async _extractTrack(trackId: string): Promise<Track> {\n    await this.setup();\n\n    const data = await this.getTrack(trackId);\n    const artists = data.body.artists.map(a => a.name);\n\n    return {\n      name: data.body.name,\n      artists,\n      albumName: data.body.album.name,\n      releaseDate: data.body.album.release_date,\n      coverUrl: data.body.album.images[0].url,\n      duration: data.body.duration_ms / 1000,\n    };\n  }\n\n  async _extractPlaylist(playlistId: string): Promise<Playlist> {\n    await this.setup();\n\n    const data = await this.getPlaylist(playlistId);\n    const details: Playlist = {\n      name: data.body.name,\n      totalTracks: data.body.tracks.total,\n      tracks: [],\n    };\n\n    const addItems = (items: { track: { id: string } }[]) => {\n      for (const item of items) {\n        details.tracks.push(item.track.id);\n      }\n    }\n\n    if (data.body.tracks.next) {\n      for (let offset = 0; details.tracks.length < details.totalTracks; offset += 100) {\n        const playlistTracks = await this.getPlaylistTracks(playlistId, { limit: 100, offset });\n\n        addItems(playlistTracks.body.items);\n      }\n    } else {\n      addItems(data.body.tracks.items);\n    }\n\n    return details;\n  }\n  //#endregion\n}\n"]}