{"version":3,"file":"Spotify.js","sourceRoot":"","sources":["../src/Spotify.ts"],"names":[],"mappings":";;;AAEA,qDAAkD;AAClD,qCAAkD;AAClD,mCAA0C;AAE1C,MAAa,OAAO;IAElB,wBAAwB;IACxB,MAAM,CAAC,YAAY,CAAC,GAAwB;QAC1C,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,uBAAe,CAAC,GAAG,CAAC,CAAC;IACzC,CAAC;IACD,YAAY;IAEZ,gBAAgB;IAChB,KAAK,CAAC,aAAa,CAAC,GAAW;QAC7B,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE,CAAC;IACpD,CAAC;IACD,YAAY;IAEZ,iBAAiB;IACT,UAAU,CAAC,GAAW;QAC5B,MAAM,SAAS,GAAG,uBAAe,CAAC,GAAG,CAAC,CAAC;QAEvC,IAAI,CAAC,SAAS,EAAE;YACd,MAAM,IAAI,+BAAsB,EAAE,CAAC;SACpC;QAED,OAAO,IAAI,+BAAc,CAAC,SAAS,CAAC,CAAC;IACvC,CAAC;CAEF;AAzBD,0BAyBC","sourcesContent":["import { DownloadedAudio, Downloader } from 'types-pkg';\n\nimport { SpotifyElement } from './SpotifyElement';\nimport { SpotifyInvalidUrlError } from './errors';\nimport { parseSpotifyUrl } from './utils';\n\nexport class Spotify implements Downloader {\n\n  //#region static methods\n  static isSpotifyUrl(url?: string | undefined): boolean {\n    return !!url && !!parseSpotifyUrl(url);\n  }\n  //#endregion\n\n  //#region public\n  async downloadAudio(url: string): Promise<DownloadedAudio | DownloadedAudio[]> {\n    return await this.getElement(url).downloadAudio();\n  }\n  //#endregion\n\n  //#region private\n  private getElement(url: string): SpotifyElement {\n    const parsedUrl = parseSpotifyUrl(url);\n\n    if (!parsedUrl) {\n      throw new SpotifyInvalidUrlError();\n    }\n\n    return new SpotifyElement(parsedUrl);\n  }\n  //#endregion\n}\n"]}