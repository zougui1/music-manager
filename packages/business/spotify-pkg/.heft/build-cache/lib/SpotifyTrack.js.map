{"version":3,"file":"SpotifyTrack.js","sourceRoot":"","sources":["../src/SpotifyTrack.ts"],"names":[],"mappings":";;;AAAA,6CAAuD;AACvD,2DAAwD;AAGxD,6CAA0C;AAC1C,qCAAgD;AAChD,iCAAiC;AAGjC,MAAa,YAAY;IAMvB,YAAY,IAAsB;QAFlC,QAAG,GAAG,IAAI,uBAAU,EAAE,CAAC;QAGrB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;QACpB,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;IACpB,CAAC;IAED,gBAAgB;IAChB,KAAK,CAAC,aAAa;QACjB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAEnD,MAAM,SAAS,GAAoB;YACjC,KAAK,EAAE,KAAK,CAAC,SAAS;YACtB,KAAK,EAAE,KAAK,CAAC,IAAI;YACjB,QAAQ,EAAE,KAAK,CAAC,QAAQ;YACxB,OAAO,EAAE,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;gBAC/B,IAAI,EAAE,CAAC;gBACP,QAAQ,EAAE,EAAE;aACb,CAAC,CAAC;SACJ,CAAC;QAEF,MAAM,UAAU,GAAG,MAAM,qBAAO,CAAC,wBAAwB,CAAC,SAAS,EAAE,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC,CAAC;QAE9F,IAAI,CAAC,UAAU,EAAE;YACf,MAAM,IAAI,6BAAoB,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,cAAO,CAAC,KAAK,EAAE,CAAC,CAAC;SAC/D;QAED,MAAM,KAAK,GAAG,MAAM,uCAAkB,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAE/D,uCACK,UAAU,KACb,KAAK,EAAE,KAAK,CAAC,IAAI,EACjB,OAAO,EAAE,KAAK,CAAC,OAAO,EACtB,KAAK,EAAE,KAAK,CAAC,SAAS,EACtB,IAAI,EAAE,KAAK,CAAC,WAAW,EACvB,KAAK,EACL,MAAM,kCACD,UAAU,CAAC,MAAM,KACpB,OAAO,EAAE,IAAI,CAAC,GAAG,OAEnB;IACJ,CAAC;CAEF;AA/CD,oCA+CC","sourcesContent":["import { Youtube, SearchCriterias } from 'youtube-pkg';\nimport { mergeMusicMetadata } from 'music-metadata-pkg';\nimport { DownloadedAudio, Downloader } from 'types-pkg';\n\nimport { SpotifyApi } from './SpotifyApi';\nimport { SpotifyNotFoundError } from './errors';\nimport { UrlType } from './data';\nimport { ParsedSpotifyUrl } from './types';\n\nexport class SpotifyTrack implements Downloader {\n\n  url: string;\n  id: string;\n  api = new SpotifyApi();\n\n  constructor(data: ParsedSpotifyUrl) {\n    this.url = data.url;\n    this.id = data.id;\n  }\n\n  //#region public\n  async downloadAudio(): Promise<DownloadedAudio> {\n    const track = await this.api.extractTrack(this.id);\n\n    const criterias: SearchCriterias = {\n      album: track.albumName,\n      title: track.name,\n      duration: track.duration,\n      artists: track.artists.map(a => ({\n        name: a,\n        altNames: [],\n      })),\n    };\n\n    const downloaded = await Youtube.downloadMostCorrectAudio(criterias, { withMetadata: false });\n\n    if (!downloaded) {\n      throw new SpotifyNotFoundError(null, { type: UrlType.track });\n    }\n\n    const cover = await mergeMusicMetadata(downloaded.file, track);\n\n    return {\n      ...downloaded,\n      title: track.name,\n      artists: track.artists,\n      album: track.albumName,\n      date: track.releaseDate,\n      cover,\n      source: {\n        ...downloaded.source,\n        spotify: this.url,\n      },\n    };\n  }\n  //#endregion\n}\n"]}