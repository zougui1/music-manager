{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":";;;AAAA,iCAAiC;AAEjC,6CAAsC;AAEtC,MAAM,YAAY,GAAG,0IAA0I,CAAC;AAChK,MAAM,MAAM,GAAG,IAAI,CAAC;AAGb,MAAM,kBAAkB,GAAG,CAAC,OAAe,EAAE,EAAE;IACpD,OAAO,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC;QAC/B,CAAC,CAAC,OAAO;QACT,CAAC,CAAC,kCAAkC,OAAO,EAAE,CAAC;AAClD,CAAC,CAAA;AAJY,QAAA,kBAAkB,sBAI9B;AAEM,MAAM,eAAe,GAAG,CAAC,GAAW,EAAgC,EAAE;IAC3E,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;IAEtC,IAAI,CAAC,KAAK,EAAE;QACV,OAAO;KACR;IAED,MAAM,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;IAC3B,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;IAChC,MAAM,IAAI,GAAG,cAAO,CAAC,SAA+B,CAAC,CAAC;IAEtD,IAAI,CAAC,IAAI,IAAI,CAAC,EAAE,EAAE;QAChB,OAAO;KACR;IAED,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC;AAC3B,CAAC,CAAA;AAhBY,QAAA,eAAe,mBAgB3B;AAEM,MAAM,cAAc,GAAG,KAAK,EAAE,QAAgB,EAA+B,EAAE;IACpF,IAAI;QACF,OAAO,MAAM,qBAAO,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;KACrD;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,SAAS,GAAG,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QAChD,OAAO,MAAM,qBAAO,CAAC,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;KACtD;AACH,CAAC,CAAC;AAPW,QAAA,cAAc,kBAOzB","sourcesContent":["import { UrlType } from './data';\nimport { ParsedSpotifyUrl } from './types';\nimport { Youtube } from 'youtube-pkg';\n\nconst reSpotifyUrl = /^(?:https?:\\/\\/open.spotify.com\\/(?:user\\/spotify\\/)?(playlist|track)\\/|spotify:(?:user:spotify:)?(playlist|track):)([a-zA-Z0-9]+)(.*)$/i;\nconst reDash = /-/g;\n\n\nexport const getSpotifyTrackUrl = (urlOrId: string) => {\n  return urlOrId.startsWith('http')\n    ? urlOrId\n    : `https://open.spotify.com/track/${urlOrId}`;\n}\n\nexport const parseSpotifyUrl = (url: string): ParsedSpotifyUrl | undefined => {\n  const match = url.match(reSpotifyUrl);\n\n  if (!match) {\n    return;\n  }\n\n  const dirtyType = match[1];\n  const id = match[2] || match[3];\n  const type = UrlType[dirtyType as unknown as UrlType];\n\n  if (!type || !id) {\n    return;\n  }\n\n  return { type, id, url };\n}\n\nexport const getYoutubeLink = async (songName: string): Promise<string | undefined> => {\n  try {\n    return await Youtube.Search.findVideoLink(songName);\n  } catch (_) {\n    const cleanName = songName.replace(reDash, ' ');\n    return await Youtube.Search.findVideoLink(cleanName);\n  }\n};\n"]}