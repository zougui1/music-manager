{"version":3,"file":"SpotifyElement.js","sourceRoot":"","sources":["../src/SpotifyElement.ts"],"names":[],"mappings":";;;AAEA,iCAAiC;AACjC,qCAAqD;AACrD,iDAA8C;AAC9C,uDAAoD;AAGpD,MAAa,cAAc;IAIzB,YAAY,IAAsB;QAChC,QAAQ,IAAI,CAAC,IAAI,EAAE;YACjB,KAAK,cAAO,CAAC,KAAK;gBAChB,IAAI,CAAC,OAAO,GAAG,IAAI,2BAAY,CAAC,IAAI,CAAC,CAAC;gBACtC,MAAM;YACR,KAAK,cAAO,CAAC,QAAQ;gBACnB,IAAI,CAAC,OAAO,GAAG,IAAI,iCAAe,CAAC,IAAI,CAAC,CAAC;gBACzC,MAAM;YAER;gBACE,MAAM,IAAI,kCAAyB,EAAE,CAAC;SACzC;IACH,CAAC;IAED,KAAK,CAAC,aAAa;QACjB,OAAO,MAAO,IAAI,CAAC,OAAwB,CAAC,aAAa,EAAE,CAAC;IAC9D,CAAC;CACF;AArBD,wCAqBC","sourcesContent":["import { DownloadedAudio, Downloader } from 'types-pkg';\n\nimport { UrlType } from './data';\nimport { SpotifyUnhandledTypeError } from './errors';\nimport { SpotifyTrack } from './SpotifyTrack';\nimport { SpotifyPlaylist } from './SpotifyPlaylist';\nimport { ParsedSpotifyUrl } from './types';\n\nexport class SpotifyElement implements Downloader {\n\n  element: Downloader;\n\n  constructor(data: ParsedSpotifyUrl) {\n    switch (data.type) {\n      case UrlType.track:\n        this.element = new SpotifyTrack(data);\n        break;\n      case UrlType.playlist:\n        this.element = new SpotifyPlaylist(data);\n        break;\n\n      default:\n        throw new SpotifyUnhandledTypeError();\n    }\n  }\n\n  async downloadAudio(): Promise<DownloadedAudio | DownloadedAudio[]> {\n    return await (this.element as SpotifyTrack).downloadAudio();\n  }\n}\n"]}