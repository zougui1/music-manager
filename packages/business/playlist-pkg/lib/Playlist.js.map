{"version":3,"file":"Playlist.js","sourceRoot":"","sources":["../src/Playlist.ts"],"names":[],"mappings":"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","sourcesContent":["import { RepositoryAccessor, PlaylistEntity, PlaylistRepository, MusicEntity, PlaylistToMusicEntity, PlaylistToMusicRepository } from 'database-pkg';\nimport { range } from 'utils-pkg';\nimport { MusicStatus } from 'types-pkg';\n\nimport { PlaylistNotFoundError } from './errors';\n\nexport class Playlist extends RepositoryAccessor<PlaylistRepository> {\n\n  constructor() {\n    super(PlaylistRepository);\n  }\n\n  //#region public\n  public async findMany(options: IFindManyOptions): Promise<PlaylistEntity[]> {\n    return this.repo.find({\n      where: { user: { id: options.user.id } },\n    });\n  }\n\n  public async findById(id: number): Promise<PlaylistEntity | undefined> {\n    // TODO merge those 2 queries\n    const playlist = await this.repo.findOne(id);\n    if (!playlist) {\n      return;\n    }\n\n    const playlistToMusics = await this\n      .getRepo(PlaylistToMusicRepository)\n      .findManyByPlaylist({\n        playlist: { id: playlist.id },\n        music: { status: MusicStatus.DOWNLOADED },\n      });\n\n    playlist.playlistToMusics = playlistToMusics;\n    return playlist;\n  }\n\n  public async update(target: IUpdateTarget, options: UpdateOptions): Promise<void> {\n    await this.updateManyOrder(target, options);\n  }\n\n  public async create(playlist: { name: string, user: { id: number } }): Promise<PlaylistEntity> {\n    const lastPlaylist = await this.repo.findOne({ order: { order: 'DESC' } });\n\n    const lastOrder = lastPlaylist?.order ?? 0;\n    const playlistData = {\n      ...playlist,\n      order: lastOrder + 1,\n      userId: playlist.user.id,\n    };\n\n    return await this.repo.create(playlistData).save();\n  }\n\n  public async addMusic(playlistId: number, music: MusicEntity): Promise<void> {\n    const playlist = await this.repo.findOne(playlistId, { relations: ['playlistToMusics'] });\n\n    if (!playlist) {\n      throw new PlaylistNotFoundError();\n    }\n\n    const orders = playlist.playlistToMusics\n      .map(p => p.order)\n      // enforce 0 to be the default value if `playlistToMusics` is empty\n      .concat([0]);\n    const lastOrder = Math.max(...orders);\n    const playlistToMusic = await PlaylistToMusicEntity\n      .create({\n        playlist,\n        music,\n        order: lastOrder + 1,\n      })\n      .save();\n\n    playlist.playlistToMusics.push(playlistToMusic);\n    await playlist.save();\n  }\n\n  public async clear(): Promise<void> {\n    //await this.getRepo(PlaylistToMusicRepository).deleteAll();\n    await this.repo.deleteAll();\n  }\n  //#endregion\n\n  //#region private\n  //#region update order\n  private async updateManyOrder(target: IUpdateTarget, { from, to }: IUpdateOrdersOptions): Promise<void> {\n    const playlist = await this.repo.findOne({ id: target.id, user: { id: target.user.id } });\n\n    if (!playlist) {\n      throw new PlaylistNotFoundError();\n    }\n\n    if (from < to) {\n      const orders = range(from + 1, to);\n      const playlists = await this.findManyByOrder(orders);\n      await this.decrementOrders(playlists);\n    } else {\n      const orders = range(to, from);\n      const playlists = await this.findManyByOrder(orders);\n      await this.incrementOrders(playlists);\n    }\n\n    await this.updateOrder(playlist.id, to);\n  }\n\n  private async decrementOrders(playlists: PlaylistEntity[]): Promise<void> {\n    const updates = playlists.map(playlist => {\n      return this.updateOrder(playlist.id, playlist.order - 1);\n    });\n\n    await Promise.all(updates);\n  }\n\n  private async incrementOrders(playlists: PlaylistEntity[]): Promise<void> {\n    const updates = playlists.map(playlist => {\n      return this.updateOrder(playlist.id, playlist.order + 1);\n    });\n\n    await Promise.all(updates);\n  }\n\n  private async updateOrder(id: number, order: number): Promise<void> {\n    await this.repo.update(id, { order });\n  }\n  //#endregion\n\n  //#region get order\n  private async findManyByOrder(orders: number[]): Promise<PlaylistEntity[]> {\n    const gets = orders.map(order => this.findOneByOrder(order));\n    const playlists = await Promise.all(gets);\n\n    return playlists.filter(p => p) as PlaylistEntity[];\n  }\n\n  private async findOneByOrder(order: number): Promise<PlaylistEntity | undefined> {\n    return await this.repo.findOne({ order });\n  }\n  //#endregion\n  //#endregion\n}\n\nexport interface IFindManyOptions {\n  user: {\n    id: number,\n  };\n}\n\nexport interface IUpdateTarget {\n  id: number;\n  user: {\n    id: number,\n  };\n}\nexport type UpdateOptions = IUpdateOrdersOptions;\nexport interface IUpdateOrdersOptions {\n  from: number;\n  to: number;\n}\n"]}