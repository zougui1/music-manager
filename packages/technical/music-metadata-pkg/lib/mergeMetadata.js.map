{"version":3,"file":"mergeMetadata.js","sourceRoot":"","sources":["../src/mergeMetadata.ts"],"names":[],"mappings":";;;;;;AAAA,oEAAgC;AAChC,8CAAsB;AACtB,gDAAwB;AACxB,2CAAoC;AAEpC,mDAA+D;AAE/D,MAAM,gBAAgB,GAAG,KAAK,CAAC;AAE/B,MAAM,mBAAmB,GAAG,CAAC,GAAW,EAAmB,EAAE;IAC3D,OAAO,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAC7C,MAAM,MAAM,GAAG,wBAAE,CAAC,iBAAiB,CAAC,cAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,gBAAgB,CAAC,CAAC;QAC3E,MAAM,QAAQ,GAAG,aAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAEjC,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1C,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;AACL,CAAC,CAAA;AAEM,MAAM,kBAAkB,GAAG,KAAK,EAAE,MAAc,EAAE,SAAoB,EAAmB,EAAE;IAChG,MAAM,KAAK,GAAG,MAAM,mBAAmB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IAC5D,MAAM,QAAQ,GAAkB;QAC9B,MAAM,EAAE,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;QACpC,KAAK,EAAE,SAAS,CAAC,SAAS;QAC1B,KAAK,EAAE,SAAS,CAAC,IAAI;QACrB,IAAI,EAAE,SAAS,CAAC,WAAW;QAC3B,WAAW,EAAE,CAAC,KAAK,CAAC;KACrB,CAAC;IAEF,MAAM,6BAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IAEtC,MAAM,QAAQ,GAAG,wBAAE,CAAC,WAAW,CAAC,EAAE,SAAS,EAAE,cAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACrE,MAAM,mBAAM,CAAC,MAAM,CAAC;SACjB,gBAAgB,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,gBAAgB,EAAE,GAAG,CAAC;SAChG,IAAI,CAAC,QAAQ,CAAC;SACd,OAAO,CAAC;IAEX,MAAM,wBAAE,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACxB,MAAM,wBAAE,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IAElC,OAAO,KAAK,CAAC;AACf,CAAC,CAAA;AAtBY,QAAA,kBAAkB,sBAsB9B","sourcesContent":["import fs from 'filesystem-pkg';\nimport got from 'got';\nimport path from 'path';\nimport { ffmpeg } from 'ffmpeg-pkg';\n\nimport { writeMetadata, MusicMetadata } from './writeMetadata';\n\nconst defaultExtension = 'jpg';\n\nconst writeDownloadStream = (url: string): Promise<string> => {\n  return new Promise<string>((resolve, reject) => {\n    const writer = fs.createWriteStream(path.extname(url) || defaultExtension);\n    const download = got.stream(url);\n\n    download.on('error', reject).pipe(writer);\n    writer.on('error', reject).waitFinish(resolve);\n  });\n}\n\nexport const mergeMusicMetadata = async (output: string, musicData: MusicData): Promise<string> => {\n  const cover = await writeDownloadStream(musicData.coverUrl);\n  const metadata: MusicMetadata = {\n    artist: musicData.artists.join(', '),\n    album: musicData.albumName,\n    title: musicData.name,\n    date: musicData.releaseDate,\n    attachments: [cover],\n  };\n\n  await writeMetadata(output, metadata);\n\n  const tempPath = fs.getTempPath({ extension: path.extname(output) });\n  await ffmpeg(output)\n    .addOutputOptions('-i', cover, '-map', '0:0', '-map', '1:0', '-c', 'copy', '-id3v2_version', '3')\n    .save(tempPath)\n    .promise;\n\n  await fs.unlink(output);\n  await fs.rename(tempPath, output);\n\n  return cover;\n}\n\nexport interface MusicData {\n  coverUrl: string;\n  artists: string[];\n  albumName: string;\n  name: string;\n  releaseDate: string;\n}\n"]}