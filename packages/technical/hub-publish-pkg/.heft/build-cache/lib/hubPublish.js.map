{"version":3,"file":"hubPublish.js","sourceRoot":"","sources":["../src/hubPublish.ts"],"names":[],"mappings":";;;;;;AAAA,8CAIa;AACb,8DAAsC;AAEtC,+BAA+C;AAC/C,uDAAoD;AAE7C,MAAM,UAAU,GAAG,CAAC,EAAE,KAAK,EAAE,IAAI,EAAQ,EAAE,OAA6B,EAAuC,EAAE;;IACtH,MAAM,QAAQ,GAAG,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,CAAC;IAC/B,MAAA,QAAQ,CAAC,MAAM,oCAAf,QAAQ,CAAC,MAAM,GAAK,mBAAa,EAAC;IAElC,MAAM,GAAG,GAAG,MAAA,QAAQ,CAAC,MAAM,mCAAI,aAAO,CAAC;IACvC,MAAM,eAAe,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;IAE5C,MAAM,IAAI,GAAG,qBAAW,CAAC,SAAS,CAAC;QACjC,KAAK;QACL,IAAI,EAAE,eAAe;KACtB,CAAC,CAAC;IAEH,OAAO,aAAG,CAAC,IAAI,CAAC,GAAG,kCACd,QAAQ,KACX,IAAI,EACJ,OAAO,EAAE,cAAc,CAAC,KAAK,EAAE,QAAQ,CAAC,IACxC,CAAC;AACL,CAAC,CAAA;AAjBY,QAAA,UAAU,cAiBtB;AAED,MAAM,aAAa,GAAG,CAAC,IAAS,EAAsB,EAAE;IACtD,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;QAC5B,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;KAC7B;IAED,IAAI,IAAI,KAAK,SAAS,EAAE;QACtB,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;KACxB;AACH,CAAC,CAAA;AAED,MAAM,cAAc,GAAG,CAAC,KAAa,EAAE,OAAgB,EAAW,EAAE;;IAClE,MAAM,cAAc,GAAG;QACrB,cAAc,EAAE,mCAAmC;KACpD,CAAC;IAEF,MAAM,YAAY,mCACb,cAAc,GACd,CAAC,MAAA,OAAO,CAAC,OAAO,mCAAI,EAAE,CAAC,CAC3B,CAAC;IAEF,IAAI,OAAO,CAAC,MAAM,EAAE;QAClB,YAAY,CAAC,aAAa,GAAG,UAAU,OAAO,CAAC,MAAM,EAAE,CAAC;KACzD;SAAM,IAAI,OAAO,CAAC,MAAM,EAAE;QACzB,MAAM,MAAM,GAAG,iCAAe,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;QACtD,YAAY,CAAC,aAAa,GAAG,UAAU,MAAM,EAAE,CAAC;KACjD;IAED,OAAO,YAAY,CAAC;AACtB,CAAC,CAAA","sourcesContent":["import got, {\n  OptionsOfTextResponseBody,\n  CancelableRequest,\n  Response,\n} from 'got';\nimport querystring from 'querystring';\n\nimport { HUB_URL, PUBLISHER_JWT } from './env';\nimport { getPublishToken } from './getPublishToken';\n\nexport const hubPublish = ({ topic, data }: Data, options?: Options | undefined): CancelableRequest<Response<string>> => {\n  const _options = options ?? {};\n  _options.jwtKey ??= PUBLISHER_JWT;\n\n  const url = _options.hubUrl ?? HUB_URL;\n  const stringifiedData = stringifyData(data);\n\n  const body = querystring.stringify({\n    topic,\n    data: stringifiedData,\n  });\n\n  return got.post(url, {\n    ..._options,\n    body,\n    headers: processHeaders(topic, _options),\n  });\n}\n\nconst stringifyData = (data: any): string | undefined => {\n  if (typeof data === 'object') {\n    return JSON.stringify(data);\n  }\n\n  if (data !== undefined) {\n    return data.toString();\n  }\n}\n\nconst processHeaders = (topic: string, options: Options): Headers => {\n  const defaultHeaders = {\n    'Content-Type': 'application/x-www-form-urlencoded',\n  };\n\n  const finalHeaders: Headers = {\n    ...defaultHeaders,\n    ...(options.headers ?? {}),\n  };\n\n  if (options.bearer) {\n    finalHeaders.Authorization = `Bearer ${options.bearer}`;\n  } else if (options.jwtKey) {\n    const bearer = getPublishToken(topic, options.jwtKey);\n    finalHeaders.Authorization = `Bearer ${bearer}`;\n  }\n\n  return finalHeaders;\n}\n\nexport type Headers = Record<string, string | string[] | undefined>;\nexport type Data = { topic: string, data: any };\nexport type Options = OptionsOfTextResponseBody & {\n  bearer?: string | undefined,\n  jwtKey?: string | undefined,\n  hubUrl?: string | undefined,\n};\n"]}