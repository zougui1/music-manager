{"version":3,"file":"createError.js","sourceRoot":"","sources":["../src/createError.ts"],"names":[],"mappings":";;;AAAA,iDAA8C;AAI9C,SAAgB,WAAW,CAAC,SAAqB;;IAC/C,YAAO,MAAM,QAAS,SAAQ,2BAAY;YAMxC,YAAY,WAAuC,EAAE,MAAkC;;gBACrF,KAAK,CAAC;oBACJ,OAAO,EAAE,WAAW,IAAI,SAAS,CAAC,WAAW;oBAC7C,MAAM,EAAE,SAAS,CAAC,MAAM;oBACxB,IAAI,EAAE,SAAS,CAAC,IAAI;oBACpB,MAAM,kCACD,CAAC,MAAA,SAAS,CAAC,MAAM,mCAAI,EAAE,CAAC,GACxB,CAAC,MAAM,aAAN,MAAM,cAAN,MAAM,GAAI,EAAE,CAAC,CAClB;iBACF,CAAC,CAAC;YACL,CAAC;SACF;QAhBiB,cAAW,GAAG,SAAS,CAAC,WAAY;QACpC,SAAM,GAAG,SAAS,CAAC,MAAO;QAC1B,OAAI,GAAG,SAAS,CAAC,IAAK;QACtB,gBAAa,GAAG,SAAS,CAAC,MAAO;WAalD;AACH,CAAC;AAnBD,kCAmBC","sourcesContent":["import { ApiException } from './ApiException';\nimport { ObjectLiteral } from 'types-pkg';\n\nexport function createError<TValues extends {} = ObjectLiteral>(errorData: IErrorData): ApiError<TValues>;\nexport function createError(errorData: IErrorData): ApiError {\n  return class ApiError extends ApiException {\n    static readonly messageCode = errorData.messageCode;\n    static readonly status = errorData.status;\n    static readonly code = errorData.code;\n    static readonly defaultValues = errorData.values;\n\n    constructor(messageCode?: string | null | undefined, values?: ObjectLiteral | undefined) {\n      super({\n        message: messageCode || errorData.messageCode,\n        status: errorData.status,\n        code: errorData.code,\n        values: {\n          ...(errorData.values ?? {}),\n          ...(values ?? {}),\n        },\n      });\n    }\n  }\n}\n\nexport interface IErrorData {\n  messageCode: string,\n  status: number,\n  code: string,\n  values?: ObjectLiteral | undefined;\n}\n\nexport type ApiErrorConstructor<TValues> = new(messageCode?: string | undefined | null, values?: TValues | undefined) => ApiException;\nexport type ApiError<TValues = ObjectLiteral> = Omit<typeof ApiException, 'new'> & IErrorData & ApiErrorConstructor<TValues>;\n"]}