{"version":3,"file":"filesystem.js","sourceRoot":"","sources":["../src/filesystem.ts"],"names":[],"mappings":";;;;;;AAAA,wDAA0B;AAC1B,gDAAwB;AAExB,+BAA0C;AAC1C,mCAAsC;AAG/B,MAAM,WAAW,GAAG,CAAC,QAAkB,EAAU,EAAE;IACxD,OAAO,cAAI,CAAC,IAAI,CAAC,cAAQ,EAAE,mBAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;AACpD,CAAC,CAAA;AAFY,QAAA,WAAW,eAEvB;AAEM,MAAM,UAAU,GAAG,CAAC,QAAkB,EAAU,EAAE;IACvD,OAAO,cAAI,CAAC,IAAI,CAAC,aAAO,EAAE,mBAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;AACnD,CAAC,CAAA;AAFY,QAAA,UAAU,cAEtB;AAEM,MAAM,SAAS,GAAG,KAAK,EAAE,SAAiB,EAAE,IAAS,EAAmB,EAAE;IAC/E,MAAM,IAAI,GAAG,kBAAU,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC;IACvC,MAAM,kBAAE,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC/B,OAAO,IAAI,CAAC;AACd,CAAC,CAAA;AAJY,QAAA,SAAS,aAIrB;AAEM,MAAM,iBAAiB,GAAG,CAAC,SAAiB,EAAe,EAAE;IAClE,MAAM,QAAQ,GAAG,mBAAW,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC;IAC5C,MAAM,MAAM,GAAG,kBAAE,CAAC,iBAAiB,CAAC,QAAQ,CAAgB,CAAC;IAE7D,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,KAAK,IAAI,EAAE;QAC7B,MAAM,OAAO,GAAG,kBAAU,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC;QAC1C,MAAM,kBAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QACjC,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,UAAU,GAAG,CAAC,QAAgC,EAAQ,EAAE;QAC7D,MAAM,CAAC,EAAE,CAAC,cAAc,EAAE,CAAC,QAAgB,EAAE,EAAE;YAC7C,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACrB,CAAC,CAAC,CAAC;IACL,CAAC,CAAA;IAED,OAAO,MAAM,CAAC;AAChB,CAAC,CAAA;AAjBY,QAAA,iBAAiB,qBAiB7B;AAIM,KAAK,UAAU,QAAQ,CAAC,QAAgB,EAAE,QAAiB;IAChE,MAAM,QAAQ,GAAG,kBAAU,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;IAE1C,OAAO,QAAQ;QACb,CAAC,CAAC,MAAM,kBAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC;QACvC,CAAC,CAAC,MAAM,kBAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;AAClC,CAAC;AAND,4BAMC;AAEM,MAAM,UAAU,GAAG,KAAK,EAAE,QAAgB,EAAoB,EAAE;IACrE,MAAM,QAAQ,GAAG,kBAAU,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;IAC1C,OAAO,MAAM,kBAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;AACvC,CAAC,CAAA;AAHY,QAAA,UAAU,cAGtB","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\n\nimport { APP_DIR, TEMP_DIR } from './env';\nimport { getFileName } from './utils';\nimport { WriteStream, PathData } from './types';\n\nexport const getTempPath = (pathData: PathData): string => {\n  return path.join(TEMP_DIR, getFileName(pathData));\n}\n\nexport const getAppPath = (pathData: PathData): string => {\n  return path.join(APP_DIR, getFileName(pathData));\n}\n\nexport const writeFile = async (extension: string, data: any): Promise<string> => {\n  const path = getAppPath({ extension });\n  await fs.writeFile(path, data);\n  return path;\n}\n\nexport const createWriteStream = (extension: string): WriteStream => {\n  const tempPath = getTempPath({ extension });\n  const stream = fs.createWriteStream(tempPath) as WriteStream;\n\n  stream.on('finish', async () => {\n    const appPath = getAppPath({ extension });\n    await fs.move(tempPath, appPath);\n    stream.emit('file-created', appPath);\n  });\n\n  stream.waitFinish = (listener: (file: string) => void): void => {\n    stream.on('file-created', (filePath: string) => {\n      listener(filePath);\n    });\n  }\n\n  return stream;\n}\n\nexport async function readFile(fileName: string): Promise<Buffer>\nexport async function readFile(fileName: string, encoding: string): Promise<string>\nexport async function readFile(fileName: string, encoding?: string): Promise<string | Buffer> {\n  const filePath = getAppPath({ fileName });\n\n  return encoding\n    ? await fs.readFile(filePath, encoding)\n    : await fs.readFile(filePath);\n}\n\nexport const fileExists = async (fileName: string): Promise<boolean> => {\n  const filePath = getAppPath({ fileName });\n  return await fs.pathExists(filePath);\n}\n"]}