/// <reference types="node" />
import fs from 'fs-extra';
declare const _default: {
    readFile(fileName: string): Promise<Buffer>;
    readFile(fileName: string, encoding: string): Promise<string>;
    getTempPath: (pathData: import("./types").PathData) => string;
    getAppPath: (pathData: import("./types").PathData) => string;
    writeFile: (extension: string, data: any) => Promise<string>;
    createWriteStream: (extension: string) => import("./types").WriteStream;
    fileExists: (fileName: string) => Promise<boolean>;
    copy(src: string, dest: string, options?: fs.CopyOptions | undefined): Promise<void>;
    copy(src: string, dest: string, callback: (err: Error) => void): void;
    copy(src: string, dest: string, options: fs.CopyOptions, callback: (err: Error) => void): void;
    copySync(src: string, dest: string, options?: fs.CopyOptionsSync | undefined): void;
    copyFile(src: string, dest: string, flags?: number | undefined): Promise<void>;
    copyFile(src: string, dest: string, callback: (err: Error) => void): void;
    copyFile(src: string, dest: string, flags: number, callback: (err: Error) => void): void;
    move(src: string, dest: string, options?: fs.MoveOptions | undefined): Promise<void>;
    move(src: string, dest: string, callback: (err: Error) => void): void;
    move(src: string, dest: string, options: fs.MoveOptions, callback: (err: Error) => void): void;
    moveSync(src: string, dest: string, options?: fs.MoveOptions | undefined): void;
    createFile(file: string): Promise<void>;
    createFile(file: string, callback: (err: Error) => void): void;
    createFileSync(file: string): void;
    createSymlink(src: string, dest: string, type: fs.SymlinkType): Promise<void>;
    createSymlink(src: string, dest: string, type: fs.SymlinkType, callback?: ((err: Error) => void) | undefined): void;
    createSymlinkSync(src: string, dest: string, type: fs.SymlinkType): void;
    ensureDir(path: string, options?: number | fs.EnsureOptions | undefined): Promise<void>;
    ensureDir(path: string, callback?: ((err: Error) => void) | undefined): void;
    ensureDir(path: string, options?: number | fs.EnsureOptions | undefined, callback?: ((err: Error) => void) | undefined): void;
    ensureDirSync(path: string, options?: number | fs.EnsureOptions | undefined): void;
    mkdirs(dir: string): Promise<void>;
    mkdirs(dir: string, callback: (err: Error) => void): void;
    mkdirp(dir: string): Promise<void>;
    mkdirp(dir: string, callback: (err: Error) => void): void;
    mkdirsSync(dir: string): void;
    mkdirpSync(dir: string): void;
    outputFile(file: string, data: any, options?: string | fs.WriteFileOptions | undefined): Promise<void>;
    outputFile(file: string, data: any, callback: (err: Error) => void): void;
    outputFile(file: string, data: any, options: string | fs.WriteFileOptions, callback: (err: Error) => void): void;
    outputFileSync(file: string, data: any, options?: string | fs.WriteFileOptions | undefined): void;
    readJson(file: string, options?: fs.ReadOptions | undefined): Promise<any>;
    readJson(file: string, callback: (err: Error, jsonObject: any) => void): void;
    readJson(file: string, options: fs.ReadOptions, callback: (err: Error, jsonObject: any) => void): void;
    readJSON(file: string, options?: fs.ReadOptions | undefined): Promise<any>;
    readJSON(file: string, callback: (err: Error, jsonObject: any) => void): void;
    readJSON(file: string, options: fs.ReadOptions, callback: (err: Error, jsonObject: any) => void): void;
    readJsonSync(file: string, options?: fs.ReadOptions | undefined): any;
    readJSONSync(file: string, options?: fs.ReadOptions | undefined): any;
    remove(dir: string, callback: (err: Error) => void): void;
    remove(dir: string, callback?: ((err: Error) => void) | undefined): Promise<void>;
    removeSync(dir: string): void;
    outputJSON(file: string, data: any, options?: fs.WriteOptions | undefined): Promise<void>;
    outputJSON(file: string, data: any, options: fs.WriteOptions, callback: (err: Error) => void): void;
    outputJSON(file: string, data: any, callback: (err: Error) => void): void;
    outputJson(file: string, data: any, options?: fs.WriteOptions | undefined): Promise<void>;
    outputJson(file: string, data: any, options: fs.WriteOptions, callback: (err: Error) => void): void;
    outputJson(file: string, data: any, callback: (err: Error) => void): void;
    outputJsonSync(file: string, data: any, options?: fs.WriteOptions | undefined): void;
    outputJSONSync(file: string, data: any, options?: fs.WriteOptions | undefined): void;
    writeJSON(file: string, object: any, options?: fs.WriteOptions | undefined): Promise<void>;
    writeJSON(file: string, object: any, callback: (err: Error) => void): void;
    writeJSON(file: string, object: any, options: fs.WriteOptions, callback: (err: Error) => void): void;
    writeJson(file: string, object: any, options?: fs.WriteOptions | undefined): Promise<void>;
    writeJson(file: string, object: any, callback: (err: Error) => void): void;
    writeJson(file: string, object: any, options: fs.WriteOptions, callback: (err: Error) => void): void;
    writeJsonSync(file: string, object: any, options?: fs.WriteOptions | undefined): void;
    writeJSONSync(file: string, object: any, options?: fs.WriteOptions | undefined): void;
    ensureFile(path: string): Promise<void>;
    ensureFile(path: string, callback: (err: Error) => void): void;
    ensureFileSync(path: string): void;
    ensureLink(src: string, dest: string): Promise<void>;
    ensureLink(src: string, dest: string, callback: (err: Error) => void): void;
    ensureLinkSync(src: string, dest: string): void;
    ensureSymlink(src: string, dest: string, type?: fs.SymlinkType | undefined): Promise<void>;
    ensureSymlink(src: string, dest: string, type: fs.SymlinkType, callback: (err: Error) => void): void;
    ensureSymlink(src: string, dest: string, callback: (err: Error) => void): void;
    ensureSymlinkSync(src: string, dest: string, type?: fs.SymlinkType | undefined): void;
    emptyDir(path: string): Promise<void>;
    emptyDir(path: string, callback: (err: Error) => void): void;
    emptyDirSync(path: string): void;
    pathExists(path: string): Promise<boolean>;
    pathExists(path: string, callback: (err: Error, exists: boolean) => void): void;
    pathExistsSync(path: string): boolean;
    access(path: fs.PathLike, callback: (err: NodeJS.ErrnoException) => void): void;
    access(path: fs.PathLike, mode: number, callback: (err: NodeJS.ErrnoException) => void): void;
    access(path: fs.PathLike, mode?: number | undefined): Promise<void>;
    appendFile(file: number | fs.PathLike, data: any, options: {
        encoding?: string | undefined;
        mode?: string | number | undefined;
        flag?: string | undefined;
    }, callback: (err: NodeJS.ErrnoException) => void): void;
    appendFile(file: number | fs.PathLike, data: any, callback: (err: NodeJS.ErrnoException) => void): void;
    appendFile(file: number | fs.PathLike, data: any, options?: {
        encoding?: string | undefined;
        mode?: string | number | undefined;
        flag?: string | undefined;
    } | undefined): Promise<void>;
    chmod(path: fs.PathLike, mode: fs.Mode, callback: (err: NodeJS.ErrnoException) => void): void;
    chmod(path: fs.PathLike, mode: fs.Mode): Promise<void>;
    chown(path: fs.PathLike, uid: number, gid: number): Promise<void>;
    chown(path: fs.PathLike, uid: number, gid: number, callback: (err: NodeJS.ErrnoException) => void): void;
    close(fd: number, callback: (err: NodeJS.ErrnoException) => void): void;
    close(fd: number): Promise<void>;
    fchmod(fd: number, mode: fs.Mode, callback: (err: NodeJS.ErrnoException) => void): void;
    fchmod(fd: number, mode: fs.Mode): Promise<void>;
    fchown(fd: number, uid: number, gid: number, callback: (err: NodeJS.ErrnoException) => void): void;
    fchown(fd: number, uid: number, gid: number): Promise<void>;
    fdatasync(fd: number, callback: () => void): void;
    fdatasync(fd: number): Promise<void>;
    fstat(fd: number, callback: (err: NodeJS.ErrnoException, stats: fs.Stats) => any): void;
    fstat(fd: number): Promise<fs.Stats>;
    fsync(fd: number, callback: (err: NodeJS.ErrnoException) => void): void;
    fsync(fd: number): Promise<void>;
    ftruncate(fd: number, callback: (err: NodeJS.ErrnoException) => void): void;
    ftruncate(fd: number, len: number, callback: (err: NodeJS.ErrnoException) => void): void;
    ftruncate(fd: number, len?: number | undefined): Promise<void>;
    futimes(fd: number, atime: number, mtime: number, callback: (err: NodeJS.ErrnoException) => void): void;
    futimes(fd: number, atime: Date, mtime: Date, callback: (err: NodeJS.ErrnoException) => void): void;
    futimes(fd: number, atime: number, mtime: number): Promise<void>;
    futimes(fd: number, atime: Date, mtime: Date): Promise<void>;
    lchown(path: fs.PathLike, uid: number, gid: number, callback: (err: NodeJS.ErrnoException) => void): void;
    lchown(path: fs.PathLike, uid: number, gid: number): Promise<void>;
    link(existingPath: fs.PathLike, newPath: fs.PathLike, callback: (err: NodeJS.ErrnoException) => void): void;
    link(existingPath: fs.PathLike, newPath: fs.PathLike): Promise<void>;
    lstat(path: fs.PathLike, callback: (err: NodeJS.ErrnoException, stats: fs.Stats) => any): void;
    lstat(path: fs.PathLike): Promise<fs.Stats>;
    mkdir(path: fs.PathLike, callback: (err: NodeJS.ErrnoException) => void): void;
    mkdir(path: fs.PathLike, options: fs.Mode | fs.MakeDirectoryOptions | null, callback: (err: NodeJS.ErrnoException) => void): void;
    mkdir(path: fs.PathLike, options?: fs.Mode | fs.MakeDirectoryOptions | null | undefined): Promise<void>;
    mkdirSync(path: fs.PathLike, options?: fs.Mode | fs.MakeDirectoryOptions | null | undefined): void;
    open(path: fs.PathLike, flags: string | number, callback: (err: NodeJS.ErrnoException, fd: number) => void): void;
    open(path: fs.PathLike, flags: string | number, mode: fs.Mode, callback: (err: NodeJS.ErrnoException, fd: number) => void): void;
    open(path: fs.PathLike, flags: string | number, mode?: fs.Mode | null | undefined): Promise<number>;
    opendir(path: string, cb: (err: NodeJS.ErrnoException | null, dir: fs.Dir) => void): void;
    opendir(path: string, options: fs.OpenDirOptions, cb: (err: NodeJS.ErrnoException | null, dir: fs.Dir) => void): void;
    opendir(path: string, options?: fs.OpenDirOptions | undefined): Promise<fs.Dir>;
    read<TBuffer extends fs.ArrayBufferView>(fd: number, buffer: TBuffer, offset: number, length: number, position: number | null, callback: (err: NodeJS.ErrnoException, bytesRead: number, buffer: TBuffer) => void): void;
    read<TBuffer_1 extends fs.ArrayBufferView>(fd: number, buffer: TBuffer_1, offset: number, length: number, position: number | null): Promise<{
        bytesRead: number;
        buffer: TBuffer_1;
    }>;
    readdir(path: fs.PathLike, callback: (err: NodeJS.ErrnoException, files: string[]) => void): void;
    readdir(path: fs.PathLike, options?: BufferEncoding | {
        encoding: BufferEncoding | null;
        withFileTypes?: false | undefined;
    } | null | undefined): Promise<string[]>;
    readdir(path: fs.PathLike, options: "buffer" | {
        encoding: "buffer";
        withFileTypes?: false | undefined;
    }): Promise<Buffer[]>;
    readdir(path: fs.PathLike, options?: {
        encoding?: string | null | undefined;
        withFileTypes?: false | undefined;
    } | undefined): Promise<string[] | Buffer[]>;
    readdir(path: fs.PathLike, options: {
        encoding?: string | null | undefined;
        withFileTypes: true;
    }): Promise<fs.Dirent[]>;
    readlink(path: fs.PathLike, callback: (err: NodeJS.ErrnoException, linkString: string) => any): void;
    readlink(path: fs.PathLike): Promise<string>;
    realpath: typeof fs.realpath;
    rename(oldPath: fs.PathLike, newPath: fs.PathLike, callback: (err: NodeJS.ErrnoException) => void): void;
    rename(oldPath: fs.PathLike, newPath: fs.PathLike): Promise<void>;
    rmdir(path: fs.PathLike, callback: (err: NodeJS.ErrnoException) => void): void;
    rmdir(path: fs.PathLike): Promise<void>;
    stat(path: fs.PathLike, callback: (err: NodeJS.ErrnoException, stats: fs.Stats) => any): void;
    stat(path: fs.PathLike): Promise<fs.Stats>;
    symlink(target: fs.PathLike, path: fs.PathLike, type: fs.SymlinkType | undefined, callback: (err: NodeJS.ErrnoException) => void): void;
    symlink(target: fs.PathLike, path: fs.PathLike, callback: (err: NodeJS.ErrnoException) => void): void;
    symlink(target: fs.PathLike, path: fs.PathLike, type?: fs.SymlinkType | undefined): Promise<void>;
    truncate(path: fs.PathLike, callback: (err: NodeJS.ErrnoException) => void): void;
    truncate(path: fs.PathLike, len: number, callback: (err: NodeJS.ErrnoException) => void): void;
    truncate(path: fs.PathLike, len?: number | undefined): Promise<void>;
    unlink(path: fs.PathLike, callback: (err: NodeJS.ErrnoException) => void): void;
    unlink(path: fs.PathLike): Promise<void>;
    utimes(path: fs.PathLike, atime: number, mtime: number, callback: (err: NodeJS.ErrnoException) => void): void;
    utimes(path: fs.PathLike, atime: Date, mtime: Date, callback: (err: NodeJS.ErrnoException) => void): void;
    utimes(path: fs.PathLike, atime: number, mtime: number): Promise<void>;
    utimes(path: fs.PathLike, atime: Date, mtime: Date): Promise<void>;
    write<TBuffer_2 extends fs.ArrayBufferView>(fd: number, buffer: TBuffer_2, offset: number, length: number, position: number | null, callback: (err: NodeJS.ErrnoException, written: number, buffer: TBuffer_2) => void): void;
    write<TBuffer_3 extends fs.ArrayBufferView>(fd: number, buffer: TBuffer_3, offset: number, length: number, callback: (err: NodeJS.ErrnoException, written: number, buffer: TBuffer_3) => void): void;
    write(fd: number, data: any, callback: (err: NodeJS.ErrnoException, written: number, str: string) => void): void;
    write(fd: number, data: any, offset: number, callback: (err: NodeJS.ErrnoException, written: number, str: string) => void): void;
    write(fd: number, data: any, offset: number, encoding: string, callback: (err: NodeJS.ErrnoException, written: number, str: string) => void): void;
    write<TBuffer_4 extends fs.ArrayBufferView>(fd: number, buffer: TBuffer_4, offset?: number | undefined, length?: number | undefined, position?: number | null | undefined): Promise<{
        bytesWritten: number;
        buffer: TBuffer_4;
    }>;
    write(fd: number, data: any, offset?: number | undefined, encoding?: string | undefined): Promise<{
        bytesWritten: number;
        buffer: string;
    }>;
    writev(fd: number, buffers: NodeJS.ArrayBufferView[], position: number, cb: (err: NodeJS.ErrnoException | null, bytesWritten: number, buffers: NodeJS.ArrayBufferView[]) => void): void;
    writev(fd: number, buffers: NodeJS.ArrayBufferView[], cb: (err: NodeJS.ErrnoException | null, bytesWritten: number, buffers: NodeJS.ArrayBufferView[]) => void): void;
    writev(fd: number, buffers: NodeJS.ArrayBufferView[], position?: number | undefined): Promise<fs.WritevResult>;
    mkdtemp(prefix: string): Promise<string>;
    mkdtemp(prefix: string, callback: (err: NodeJS.ErrnoException, folder: string) => void): void;
    createLink: typeof fs.ensureLink;
    createLinkSync: typeof fs.ensureLinkSync;
    emptydir: typeof fs.emptyDir;
    emptydirSync: typeof fs.emptyDirSync;
    renameSync(oldPath: fs.PathLike, newPath: fs.PathLike): void;
    truncateSync(path: fs.PathLike, len?: number | null | undefined): void;
    ftruncateSync(fd: number, len?: number | null | undefined): void;
    chownSync(path: fs.PathLike, uid: number, gid: number): void;
    fchownSync(fd: number, uid: number, gid: number): void;
    lchownSync(path: fs.PathLike, uid: number, gid: number): void;
    lutimes: typeof fs.lutimes;
    lutimesSync(path: fs.PathLike, atime: string | number | Date, mtime: string | number | Date): void;
    chmodSync(path: fs.PathLike, mode: import("fs").Mode): void;
    fchmodSync(fd: number, mode: import("fs").Mode): void;
    lchmod: typeof fs.lchmod;
    lchmodSync(path: fs.PathLike, mode: import("fs").Mode): void;
    statSync(path: fs.PathLike, options?: (fs.StatOptions & {
        bigint?: false | undefined;
    }) | undefined): fs.Stats;
    statSync(path: fs.PathLike, options: fs.StatOptions & {
        bigint: true;
    }): fs.BigIntStats;
    statSync(path: fs.PathLike, options?: fs.StatOptions | undefined): fs.Stats | fs.BigIntStats;
    fstatSync(fd: number, options?: (fs.StatOptions & {
        bigint?: false | undefined;
    }) | undefined): fs.Stats;
    fstatSync(fd: number, options: fs.StatOptions & {
        bigint: true;
    }): fs.BigIntStats;
    fstatSync(fd: number, options?: fs.StatOptions | undefined): fs.Stats | fs.BigIntStats;
    lstatSync(path: fs.PathLike, options?: (fs.StatOptions & {
        bigint?: false | undefined;
    }) | undefined): fs.Stats;
    lstatSync(path: fs.PathLike, options: fs.StatOptions & {
        bigint: true;
    }): fs.BigIntStats;
    lstatSync(path: fs.PathLike, options?: fs.StatOptions | undefined): fs.Stats | fs.BigIntStats;
    linkSync(existingPath: fs.PathLike, newPath: fs.PathLike): void;
    symlinkSync(target: fs.PathLike, path: fs.PathLike, type?: import("fs").symlink.Type | null | undefined): void;
    readlinkSync(path: fs.PathLike, options?: BufferEncoding | fs.BaseEncodingOptions | null | undefined): string;
    readlinkSync(path: fs.PathLike, options: fs.BufferEncodingOption): Buffer;
    readlinkSync(path: fs.PathLike, options?: string | fs.BaseEncodingOptions | null | undefined): string | Buffer;
    realpathSync: typeof fs.realpathSync;
    unlinkSync(path: fs.PathLike): void;
    rmdirSync(path: fs.PathLike, options?: fs.RmDirOptions | undefined): void;
    rm: typeof fs.rm;
    rmSync(path: fs.PathLike, options?: fs.RmOptions | undefined): void;
    mkdtempSync(prefix: string, options?: BufferEncoding | fs.BaseEncodingOptions | null | undefined): string;
    mkdtempSync(prefix: string, options: fs.BufferEncodingOption): Buffer;
    mkdtempSync(prefix: string, options?: string | fs.BaseEncodingOptions | null | undefined): string | Buffer;
    readdirSync(path: fs.PathLike, options?: BufferEncoding | {
        encoding: BufferEncoding | null;
        withFileTypes?: false | undefined;
    } | null | undefined): string[];
    readdirSync(path: fs.PathLike, options: "buffer" | {
        encoding: "buffer";
        withFileTypes?: false | undefined;
    }): Buffer[];
    readdirSync(path: fs.PathLike, options?: BufferEncoding | (fs.BaseEncodingOptions & {
        withFileTypes?: false | undefined;
    }) | null | undefined): string[] | Buffer[];
    readdirSync(path: fs.PathLike, options: fs.BaseEncodingOptions & {
        withFileTypes: true;
    }): fs.Dirent[];
    closeSync(fd: number): void;
    openSync(path: fs.PathLike, flags: fs.OpenMode, mode?: import("fs").Mode | null | undefined): number;
    utimesSync(path: fs.PathLike, atime: string | number | Date, mtime: string | number | Date): void;
    futimesSync(fd: number, atime: string | number | Date, mtime: string | number | Date): void;
    fsyncSync(fd: number): void;
    writeSync(fd: number, buffer: NodeJS.ArrayBufferView, offset?: number | null | undefined, length?: number | null | undefined, position?: number | null | undefined): number;
    writeSync(fd: number, string: string, position?: number | null | undefined, encoding?: BufferEncoding | null | undefined): number;
    readSync(fd: number, buffer: NodeJS.ArrayBufferView, offset: number, length: number, position: number | null): number;
    readSync(fd: number, buffer: NodeJS.ArrayBufferView, opts?: fs.ReadSyncOptions | undefined): number;
    readFileSync(path: number | fs.PathLike, options?: {
        encoding?: null | undefined;
        flag?: string | undefined;
    } | null | undefined): Buffer;
    readFileSync(path: number | fs.PathLike, options: BufferEncoding | {
        encoding: BufferEncoding;
        flag?: string | undefined;
    }): string;
    readFileSync(path: number | fs.PathLike, options?: BufferEncoding | (fs.BaseEncodingOptions & {
        flag?: string | undefined;
    }) | null | undefined): string | Buffer;
    writeFileSync(path: number | fs.PathLike, data: string | NodeJS.ArrayBufferView, options?: import("fs").WriteFileOptions | undefined): void;
    appendFileSync(file: number | fs.PathLike, data: string | Uint8Array, options?: import("fs").WriteFileOptions | undefined): void;
    watchFile(filename: fs.PathLike, options: {
        persistent?: boolean | undefined;
        interval?: number | undefined;
    } | undefined, listener: (curr: fs.Stats, prev: fs.Stats) => void): void;
    watchFile(filename: fs.PathLike, listener: (curr: fs.Stats, prev: fs.Stats) => void): void;
    unwatchFile(filename: fs.PathLike, listener?: ((curr: fs.Stats, prev: fs.Stats) => void) | undefined): void;
    watch(filename: fs.PathLike, options: BufferEncoding | {
        encoding?: BufferEncoding | null | undefined;
        persistent?: boolean | undefined;
        recursive?: boolean | undefined;
    } | null | undefined, listener?: ((event: "rename" | "change", filename: string) => void) | undefined): fs.FSWatcher;
    watch(filename: fs.PathLike, options: "buffer" | {
        encoding: "buffer";
        persistent?: boolean | undefined;
        recursive?: boolean | undefined;
    }, listener?: ((event: "rename" | "change", filename: Buffer) => void) | undefined): fs.FSWatcher;
    watch(filename: fs.PathLike, options: string | {
        encoding?: BufferEncoding | null | undefined;
        persistent?: boolean | undefined;
        recursive?: boolean | undefined;
    } | null, listener?: ((event: "rename" | "change", filename: string | Buffer) => void) | undefined): fs.FSWatcher;
    watch(filename: fs.PathLike, listener?: ((event: "rename" | "change", filename: string) => any) | undefined): fs.FSWatcher;
    exists: typeof fs.exists;
    existsSync(path: fs.PathLike): boolean;
    accessSync(path: fs.PathLike, mode?: number | undefined): void;
    createReadStream(path: fs.PathLike, options?: string | {
        flags?: string | undefined;
        encoding?: BufferEncoding | undefined;
        fd?: number | undefined;
        mode?: number | undefined;
        autoClose?: boolean | undefined;
        emitClose?: boolean | undefined;
        start?: number | undefined;
        end?: number | undefined;
        highWaterMark?: number | undefined;
    } | undefined): fs.ReadStream;
    fdatasyncSync(fd: number): void;
    copyFileSync(src: fs.PathLike, dest: fs.PathLike, flags?: number | undefined): void;
    writevSync(fd: number, buffers: readonly NodeJS.ArrayBufferView[], position?: number | undefined): number;
    readv: typeof fs.readv;
    readvSync(fd: number, buffers: readonly NodeJS.ArrayBufferView[], position?: number | undefined): number;
    opendirSync(path: string, options?: fs.OpenDirOptions | undefined): fs.Dir;
    promises: typeof fs.promises;
    Stats: typeof fs.Stats;
    Dirent: typeof fs.Dirent;
    Dir: typeof fs.Dir;
    ReadStream: typeof fs.ReadStream;
    WriteStream: typeof fs.WriteStream;
    constants: typeof fs.constants;
    BigIntStats: typeof fs.BigIntStats;
};
export default _default;
//# sourceMappingURL=index.d.ts.map