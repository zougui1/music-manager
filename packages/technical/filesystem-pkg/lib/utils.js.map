{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2CAA6B;AAC7B,0EAAyC;AAIzC,MAAM,UAAU,GAAG,8BAA8B,CAAC;AAElD,MAAM,aAAa,GAAG,CAAC,QAAgB,EAAE,SAAkB,EAAU,EAAE;IACrE,IAAI,CAAC,SAAS,EAAE;QACd,OAAO,QAAQ,CAAC;KACjB;IAED,MAAM,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;IAElD,OAAO,QAAQ,GAAG,GAAG,GAAG,2BAAQ,CAAC,OAAO,CAAC,CAAC;AAC5C,CAAC,CAAA;AAEM,MAAM,WAAW,GAAG,CAAC,QAAkB,EAAU,EAAE;;IACxD,OAAO,aAAa,CAAC,MAAA,QAAQ,CAAC,QAAQ,mCAAI,IAAI,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC;AAC3E,CAAC,CAAA;AAFY,QAAA,WAAW,eAEvB","sourcesContent":["import * as uuid from 'uuid';\nimport sanitize from 'sanitize-filename';\n\nimport { PathData } from './types';\n\nconst reSanitize = /^(\\.)|(\\.{2,})|(\\/)|(\\?.*)?/g;\n\nconst withExtension = (fileName: string, extension?: string): string => {\n  if (!extension) {\n    return fileName;\n  }\n\n  const extName = extension.replace(reSanitize, '');\n\n  return fileName + '.' + sanitize(extName);\n}\n\nexport const getFileName = (pathData: PathData): string => {\n  return withExtension(pathData.fileName ?? uuid.v4(), pathData.extension);\n}\n"]}