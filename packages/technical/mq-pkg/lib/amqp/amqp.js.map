{"version":3,"file":"amqp.js","sourceRoot":"","sources":["../../src/amqp/amqp.ts"],"names":[],"mappings":";;;AAAA,6CAAqC;AACrC,+CAAmE;AAcnE,SAAgB,EAAE,CAAC,gBAAwD,EAAE,QAAgE,EAAE,WAAqB,EAAE;IACpK,kBAAK,EAAE,CAAA;IACP,OAAO,gBAAK,CAAC,gBAAgB,EAAE,QAAe,EAAE,QAAQ,CAAC,CAAC;AAC5D,CAAC;AAHD,gBAGC;AAKD,SAAgB,OAAO,CAAC,SAAiD,EAAE,WAAqB,EAAE;IAChG,kBAAK,EAAE,CAAC;IACR,OAAO,qBAAU,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;AACzC,CAAC;AAHD,0BAGC","sourcesContent":["import { start } from './lowAmqpApi';\nimport { on as rawOn, observe as rawObserve } from './amqpActions';\nimport {\n  MessageHandler,\n  ConnectionHandler,\n  DisconnectHandler,\n  Actions,\n  MessageObserver,\n  ConnectionObserver,\n  EventObserver,\n} from '../types';\n\nexport function on(eventName: '$connection', listener: ConnectionHandler): Actions;\nexport function on(eventName: '$disconnect', listener: DisconnectHandler): Actions;\nexport function on(queueName: string, listener: MessageHandler, forTypes: string[]): Actions;\nexport function on(queueNameOrEvent: string | '$connection' | '$disconnect', listener: MessageHandler | ConnectionHandler | DisconnectHandler, forTypes: string[] = []): Actions {\n  start()\n  return rawOn(queueNameOrEvent, listener as any, forTypes);\n}\n\nexport function observe(eventName: '$connection'): ConnectionObserver;\nexport function observe(eventName: '$disconnect'): ConnectionObserver;\nexport function observe(queueName: string, forTypes: string[]): MessageObserver;\nexport function observe(eventName: string | '$connection' | '$disconnect', forTypes: string[] = []): EventObserver {\n  start();\n  return rawObserve(eventName, forTypes);\n}\n"]}