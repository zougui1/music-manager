{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"","sourcesContent":["import { Observable } from 'rxjs';\nimport { Connection } from 'amqplib';\n\nexport interface ObjectOf<T> {\n  [key: string]: T;\n}\n\nexport type ObjectLiteral = ObjectOf<any>;\n\nexport type MessageHandler = (message: Message) => any;\nexport type ConnectionHandler = (connection: Connection) => any;\nexport type DisconnectHandler = (connection: Connection) => any;\n\nexport interface Actions {\n  on(eventName: '$connection', listener: ConnectionHandler): Actions;\n  on(eventName: '$disconnect', listener: DisconnectHandler): Actions;\n  on(queueName: string, listener: MessageHandler, forTypes?: string[] | undefined): Actions;\n}\n\nexport interface QueueActions {\n  on(eventName: '$connection', listener: ConnectionHandler): QueueActions;\n  on(eventName: '$disconnect', listener: DisconnectHandler): QueueActions;\n  on(listener: MessageHandler, forTypes?: string[] | undefined): QueueActions;\n}\n\nexport interface Message {\n  body: any;\n  headers: ObjectLiteral;\n  ack: (allUpTo?: boolean | undefined) => void;\n}\n\nexport type MessageObserver = Observable<Message>;\nexport type ConnectionObserver = Observable<Connection>;\nexport type EventObserver = Observable<Message | Connection>;\n\nexport interface ManyMessages {\n  ackAll: (allUpTo?: boolean | undefined) => void;\n  messages: Message[];\n}\n"]}