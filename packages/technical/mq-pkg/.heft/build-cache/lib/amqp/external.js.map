{"version":3,"file":"external.js","sourceRoot":"","sources":["../../src/amqp/external.ts"],"names":[],"mappings":";;;AAAA,iCAAqC;AACrC,6CAAuC;AAYhC,MAAM,QAAQ,GAAG,CAAC,SAAiB,EAAE,EAAE;IAC5C,MAAM,YAAY,GAAG,KAAK,EAAE,OAAY,EAAE,OAA0C,EAAiB,EAAE;QACrG,MAAM,oBAAO,CAAC,SAAS,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IAC7C,CAAC,CAAA;IAED,MAAM,OAAO,GAAG,CAAC,mBAAmE,EAAE,eAA8E,EAAoE,EAAE;QACxO,MAAM,KAAK,GAAG,OAAO,mBAAmB,KAAK,QAAQ;YACnD,CAAC,CAAC,mBAAmB;YACrB,CAAC,CAAC,SAAS,CAAC;QAEd,MAAM,QAAQ,GAAG,OAAO,eAAe,KAAK,UAAU;YACpD,CAAC,CAAC,eAAe;YACjB,CAAC,CAAC,mBAAqC,CAAC;QAE1C,MAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,CAAC;QAEpE,OAAO;YACL,SAAS,EAAE,KAAK;YAChB,QAAQ,EAAE,QAA0B;YACpC,KAAK;SACN,CAAC;IACJ,CAAC,CAAA;IAKD,SAAS,OAAO,CAAC,mBAAmE,EAAE,eAA8E;QAClK,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,OAAO,CAAC,mBAAmB,EAAE,eAAe,CAAC,CAAC;QACrF,SAAE,CAAC,SAAS,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAA;QAE9B,OAAO,YAAY,CAAC;IACtB,CAAC;IAKD,SAAS,YAAY,CAAC,gBAA2D;QAC/E,IAAI,KAAK,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE;YACnC,OAAO,cAAO,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC;SAC7C;QAED,OAAO,cAAO,CAAC,SAA0C,CAAC,CAAC;IAC7D,CAAC;IAED,MAAM,YAAY,GAAG;QACnB,EAAE,EAAE,OAAO;KACZ,CAAC;IAEF,OAAO;QACL,EAAE,EAAE,OAAO;QACX,OAAO,EAAE,YAAY;QACrB,OAAO,EAAE,YAAY;KACtB,CAAC;AACJ,CAAC,CAAA;AArDY,QAAA,QAAQ,YAqDpB","sourcesContent":["import { on, observe } from './amqp';\nimport { publish } from './lowAmqpApi';\nimport {\n  ObjectLiteral,\n  ConnectionHandler,\n  DisconnectHandler,\n  MessageHandler,\n  QueueActions,\n  MessageObserver,\n  ConnectionObserver,\n  EventObserver,\n} from '../types';\n\nexport const forQueue = (queueName: string) => {\n  const publishQueue = async (content: any, headers?: ObjectLiteral | null | undefined): Promise<void> => {\n    await publish(queueName, content, headers);\n  }\n\n  const getArgs = (eventNameOrListener: MessageHandler | '$connection' | '$disconnect', listenerOrTypes?: ConnectionHandler | DisconnectHandler | string[] | undefined): { queueName: string, listener: MessageHandler, types: string[] } => {\n    const queue = typeof eventNameOrListener === 'string'\n      ? eventNameOrListener\n      : queueName;\n\n    const listener = typeof listenerOrTypes === 'function'\n      ? listenerOrTypes\n      : eventNameOrListener as MessageHandler;\n\n    const types = Array.isArray(listenerOrTypes) ? listenerOrTypes : [];\n\n    return {\n      queueName: queue,\n      listener: listener as MessageHandler,\n      types,\n    };\n  }\n\n  function onQueue(eventName: '$connection', listener: ConnectionHandler): QueueActions;\n  function onQueue(eventName: '$disconnect', listener: DisconnectHandler): QueueActions;\n  function onQueue(listener: MessageHandler, forTypes?: string[]): QueueActions;\n  function onQueue(eventNameOrListener: MessageHandler | '$connection' | '$disconnect', listenerOrTypes?: ConnectionHandler | DisconnectHandler | string[] | undefined): QueueActions {\n    const { queueName, listener, types } = getArgs(eventNameOrListener, listenerOrTypes);\n    on(queueName, listener, types)\n\n    return queueActions;\n  }\n\n  function observeQueue(eventName: '$connection'): ConnectionObserver;\n  function observeQueue(eventName: '$disconnect'): ConnectionObserver;\n  function observeQueue(forTypes?: string[]): MessageObserver;\n  function observeQueue(eventNameOrTypes?: string[] | '$connection' | '$disconnect'): EventObserver {\n    if (Array.isArray(eventNameOrTypes)) {\n      return observe(queueName, eventNameOrTypes);\n    }\n\n    return observe(queueName as '$connection' & '$disconnect');\n  }\n\n  const queueActions = {\n    on: onQueue,\n  };\n\n  return {\n    on: onQueue,\n    publish: publishQueue,\n    observe: observeQueue,\n  };\n}\n"]}