{"version":3,"file":"lowAmqpApi.js","sourceRoot":"","sources":["../../src/amqp/lowAmqpApi.ts"],"names":[],"mappings":"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","sourcesContent":["import amqp, { Connection, ConsumeMessage } from 'amqplib';\nimport { EventEmitter } from 'events';\n\nimport { disconnectOnProcessExit } from '../utils';\nimport { ObjectLiteral, MessageHandler } from '../types';\n\nlet connection: Connection | undefined;\nexport const connectionEvent = new EventEmitter();\n\nconst disconnect = (signal: string) => {\n  return async () => {\n    console.log(`[AMQP] ${signal} signal received.`);\n\n    if (!connection) {\n      console.log('[AMQP] No subscription to close.');\n      return;\n    }\n\n    console.log('[AMQP] Closing subscription.');\n    await connection.close();\n    connectionEvent.emit('disconnect', signal);\n    console.log('[AMQP] Subscription closed.');\n  }\n}\n\nexport const isConnected = (): boolean => {\n  return !!connection;\n}\n\nconst handleMessage = (listener: MessageHandler, ack: (message: amqp.Message, allUpTo?: boolean | undefined) => void) => (message: ConsumeMessage | null): void => {\n  if (!message) {\n    return;\n  }\n\n  const acknowledge = (allUpTo?: boolean | undefined) => {\n    ack(message, allUpTo);\n  }\n\n  listener({\n    body: JSON.parse(message.content.toString()).payload,\n    headers: message.properties.headers,\n    ack: acknowledge,\n  });\n}\n\nexport const listenQueue = async (queueName: string, listener: MessageHandler): Promise<void> => {\n  if (!connection) {\n    return;\n  }\n\n  const channel = await connection.createChannel();\n  await channel.assertQueue(queueName, { durable: true });\n  await channel.consume(queueName, handleMessage(listener, channel.ack.bind(channel)), { noAck: false });\n}\n\nconst connect = async (): Promise<Connection> => {\n  if (!process.env.RABBITMQ_SERVER_URL) {\n    throw new Error('The environment variable \\'RABBITMQ_SERVER_URL\\' is missing');\n  }\n\n  return await amqp.connect(process.env.RABBITMQ_SERVER_URL);\n}\n\nexport const start = async (): Promise<Connection> => {\n  if (connection) {\n    return connection;\n  }\n\n  connection = await connect();\n  disconnectOnProcessExit(disconnect);\n  connectionEvent.emit('connection', connection);\n  return connection;\n}\n\nexport const publish = async (queueName: string, content: any, headers?: ObjectLiteral | null | undefined): Promise<void> => {\n  const connection = await connect();\n  const body = { payload: content };\n  const bodyString = JSON.stringify(body);\n\n  try {\n    const channel = await connection.createChannel();\n    await channel.assertQueue(queueName, { durable: true });\n    await channel.sendToQueue(queueName, Buffer.from(bodyString), { headers, persistent: true });\n\n    console.log(`[AMQP] Sent \\'${bodyString}\\' with the headers \\'${JSON.stringify(headers)}\\'`);\n\n    await channel.close();\n  } finally {\n    await connection.close();\n  }\n}\n"]}